{"ast":null,"code":"import _createForOfIteratorHelper from \"E:/Dev/Projects/In Progress/portfolio-backup/myportfolio/portfolio/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"E:/Dev/Projects/In Progress/portfolio-backup/myportfolio/portfolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"E:/Dev/Projects/In Progress/portfolio-backup/myportfolio/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Dev/Projects/In Progress/portfolio-backup/myportfolio/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"E:/Dev/Projects/In Progress/portfolio-backup/myportfolio/portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/Dev/Projects/In Progress/portfolio-backup/myportfolio/portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"E:\\\\Dev\\\\Projects\\\\In Progress\\\\portfolio-backup\\\\myportfolio\\\\portfolio\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { ExternalInteractorBase } from \"../../../Core\";\nimport { isInArray } from \"../../../Utils\";\nexport var Connector = /*#__PURE__*/function (_ExternalInteractorBa) {\n  _inherits(Connector, _ExternalInteractorBa);\n\n  var _super = _createSuper(Connector);\n\n  function Connector(container) {\n    _classCallCheck(this, Connector);\n\n    return _super.call(this, container);\n  }\n\n  _createClass(Connector, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      var container = this.container,\n          mouse = container.interactivity.mouse,\n          events = container.actualOptions.interactivity.events;\n\n      if (!(events.onHover.enable && mouse.position)) {\n        return false;\n      }\n\n      return isInArray(\"connect\", events.onHover.mode);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }, {\n    key: \"interact\",\n    value: function () {\n      var _interact = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var container, options, mousePos, distance, query, i, _iterator, _step, p1, pos1, _iterator2, _step2, p2, pos2, distMax, xDiff, yDiff;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                container = this.container, options = container.actualOptions;\n\n                if (!(options.interactivity.events.onHover.enable && container.interactivity.status === \"mousemove\")) {\n                  _context.next = 9;\n                  break;\n                }\n\n                mousePos = container.interactivity.mouse.position;\n\n                if (mousePos) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 5:\n                distance = Math.abs(container.retina.connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance);\n                i = 0;\n                _iterator = _createForOfIteratorHelper(query);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    p1 = _step.value;\n                    pos1 = p1.getPosition();\n                    _iterator2 = _createForOfIteratorHelper(query.slice(i + 1));\n\n                    try {\n                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                        p2 = _step2.value;\n                        pos2 = p2.getPosition(), distMax = Math.abs(container.retina.connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);\n\n                        if (xDiff < distMax && yDiff < distMax) {\n                          container.canvas.drawConnectLine(p1, p2);\n                        }\n                      }\n                    } catch (err) {\n                      _iterator2.e(err);\n                    } finally {\n                      _iterator2.f();\n                    }\n\n                    ++i;\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function interact() {\n        return _interact.apply(this, arguments);\n      }\n\n      return interact;\n    }()\n  }]);\n\n  return Connector;\n}(ExternalInteractorBase);","map":{"version":3,"sources":["E:/Dev/Projects/In Progress/portfolio-backup/myportfolio/portfolio/node_modules/tsparticles/esm/Interactions/External/Connect/Connector.js"],"names":["ExternalInteractorBase","isInArray","Connector","container","mouse","interactivity","events","actualOptions","onHover","enable","position","mode","options","status","mousePos","distance","Math","abs","retina","connectModeRadius","query","particles","quadTree","queryCircle","i","p1","pos1","getPosition","slice","p2","pos2","distMax","connectModeDistance","xDiff","x","yDiff","y","canvas","drawConnectLine"],"mappings":";;;;;;;AAAA,SAASA,sBAAT,QAAuC,eAAvC;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,WAAaC,SAAb;AAAA;;AAAA;;AACI,qBAAYC,SAAZ,EAAuB;AAAA;;AAAA,6BACbA,SADa;AAEtB;;AAHL;AAAA;AAAA,WAII,qBAAY;AACR,UAAMA,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkCC,KAAK,GAAGD,SAAS,CAACE,aAAV,CAAwBD,KAAlE;AAAA,UAAyEE,MAAM,GAAGH,SAAS,CAACI,aAAV,CAAwBF,aAAxB,CAAsCC,MAAxH;;AACA,UAAI,EAAEA,MAAM,CAACE,OAAP,CAAeC,MAAf,IAAyBL,KAAK,CAACM,QAAjC,CAAJ,EAAgD;AAC5C,eAAO,KAAP;AACH;;AACD,aAAOT,SAAS,CAAC,SAAD,EAAYK,MAAM,CAACE,OAAP,CAAeG,IAA3B,CAAhB;AACH;AAVL;AAAA;AAAA,WAWI,iBAAQ,CACP;AAZL;AAAA;AAAA;AAAA,+EAaI;AAAA;;AAAA;AAAA;AAAA;AAAA;AACUR,gBAAAA,SADV,GACsB,KAAKA,SAD3B,EACsCS,OADtC,GACgDT,SAAS,CAACI,aAD1D;;AAAA,sBAEQK,OAAO,CAACP,aAAR,CAAsBC,MAAtB,CAA6BE,OAA7B,CAAqCC,MAArC,IAA+CN,SAAS,CAACE,aAAV,CAAwBQ,MAAxB,KAAmC,WAF1F;AAAA;AAAA;AAAA;;AAGcC,gBAAAA,QAHd,GAGyBX,SAAS,CAACE,aAAV,CAAwBD,KAAxB,CAA8BM,QAHvD;;AAAA,oBAIaI,QAJb;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAOcC,gBAAAA,QAPd,GAOyBC,IAAI,CAACC,GAAL,CAASd,SAAS,CAACe,MAAV,CAAiBC,iBAA1B,CAPzB,EAOuEC,KAPvE,GAO+EjB,SAAS,CAACkB,SAAV,CAAoBC,QAApB,CAA6BC,WAA7B,CAAyCT,QAAzC,EAAmDC,QAAnD,CAP/E;AAQYS,gBAAAA,CARZ,GAQgB,CARhB;AAAA,uDASyBJ,KATzB;;AAAA;AASQ,sEAAwB;AAAbK,oBAAAA,EAAa;AACdC,oBAAAA,IADc,GACPD,EAAE,CAACE,WAAH,EADO;AAAA,4DAEHP,KAAK,CAACQ,KAAN,CAAYJ,CAAC,GAAG,CAAhB,CAFG;;AAAA;AAEpB,6EAAqC;AAA1BK,wBAAAA,EAA0B;AAC3BC,wBAAAA,IAD2B,GACpBD,EAAE,CAACF,WAAH,EADoB,EACFI,OADE,GACQf,IAAI,CAACC,GAAL,CAASd,SAAS,CAACe,MAAV,CAAiBc,mBAA1B,CADR,EACwDC,KADxD,GACgEjB,IAAI,CAACC,GAAL,CAASS,IAAI,CAACQ,CAAL,GAASJ,IAAI,CAACI,CAAvB,CADhE,EAC2FC,KAD3F,GACmGnB,IAAI,CAACC,GAAL,CAASS,IAAI,CAACU,CAAL,GAASN,IAAI,CAACM,CAAvB,CADnG;;AAEjC,4BAAIH,KAAK,GAAGF,OAAR,IAAmBI,KAAK,GAAGJ,OAA/B,EAAwC;AACpC5B,0BAAAA,SAAS,CAACkC,MAAV,CAAiBC,eAAjB,CAAiCb,EAAjC,EAAqCI,EAArC;AACH;AACJ;AAPmB;AAAA;AAAA;AAAA;AAAA;;AAQpB,sBAAEL,CAAF;AACH;AAlBT;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAbJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,EAA+BxB,sBAA/B","sourcesContent":["import { ExternalInteractorBase } from \"../../../Core\";\nimport { isInArray } from \"../../../Utils\";\nexport class Connector extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled() {\n        const container = this.container, mouse = container.interactivity.mouse, events = container.actualOptions.interactivity.events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        return isInArray(\"connect\", events.onHover.mode);\n    }\n    reset() {\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions;\n        if (options.interactivity.events.onHover.enable && container.interactivity.status === \"mousemove\") {\n            const mousePos = container.interactivity.mouse.position;\n            if (!mousePos) {\n                return;\n            }\n            const distance = Math.abs(container.retina.connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance);\n            let i = 0;\n            for (const p1 of query) {\n                const pos1 = p1.getPosition();\n                for (const p2 of query.slice(i + 1)) {\n                    const pos2 = p2.getPosition(), distMax = Math.abs(container.retina.connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);\n                    if (xDiff < distMax && yDiff < distMax) {\n                        container.canvas.drawConnectLine(p1, p2);\n                    }\n                }\n                ++i;\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}