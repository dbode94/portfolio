{"ast":null,"code":"import _createForOfIteratorHelper from \"E:/Dev/Projects/In Progress/portfolio-backup/myportfolio/portfolio/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"E:/Dev/Projects/In Progress/portfolio-backup/myportfolio/portfolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"E:/Dev/Projects/In Progress/portfolio-backup/myportfolio/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Dev/Projects/In Progress/portfolio-backup/myportfolio/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"E:\\\\Dev\\\\Projects\\\\In Progress\\\\portfolio-backup\\\\myportfolio\\\\portfolio\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { isInArray, itemFromArray, loadFont } from \"../../Utils\";\nexport var validTypes = [\"text\", \"character\", \"char\"];\nexport var TextDrawer = /*#__PURE__*/function () {\n  function TextDrawer() {\n    _classCallCheck(this, TextDrawer);\n  }\n\n  _createClass(TextDrawer, [{\n    key: \"getSidesCount\",\n    value: function getSidesCount() {\n      return 12;\n    }\n  }, {\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(container) {\n        var options, shapeOptions, promises, _iterator, _step, character;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = container.actualOptions;\n\n                if (!validTypes.find(function (t) {\n                  return isInArray(t, options.particles.shape.type);\n                })) {\n                  _context.next = 14;\n                  break;\n                }\n\n                shapeOptions = validTypes.map(function (t) {\n                  return options.particles.shape.options[t];\n                }).find(function (t) {\n                  return !!t;\n                });\n\n                if (!(shapeOptions instanceof Array)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                promises = [];\n                _iterator = _createForOfIteratorHelper(shapeOptions);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    character = _step.value;\n                    promises.push(loadFont(character));\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                _context.next = 9;\n                return Promise.allSettled(promises);\n\n              case 9:\n                _context.next = 14;\n                break;\n\n              case 11:\n                if (!(shapeOptions !== undefined)) {\n                  _context.next = 14;\n                  break;\n                }\n\n                _context.next = 14;\n                return loadFont(shapeOptions);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function init(_x) {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n  }, {\n    key: \"draw\",\n    value: function draw(context, particle, radius, opacity) {\n      var _a, _b, _c;\n\n      var character = particle.shapeData;\n\n      if (character === undefined) {\n        return;\n      }\n\n      var textData = character.value;\n\n      if (textData === undefined) {\n        return;\n      }\n\n      var textParticle = particle;\n\n      if (textParticle.text === undefined) {\n        textParticle.text = textData instanceof Array ? itemFromArray(textData, particle.randomIndexData) : textData;\n      }\n\n      var text = textParticle.text;\n      var style = (_a = character.style) !== null && _a !== void 0 ? _a : \"\";\n      var weight = (_b = character.weight) !== null && _b !== void 0 ? _b : \"400\";\n      var size = Math.round(radius) * 2;\n      var font = (_c = character.font) !== null && _c !== void 0 ? _c : \"Verdana\";\n      var fill = particle.fill;\n      var offsetX = text.length * radius / 2;\n      context.font = \"\".concat(style, \" \").concat(weight, \" \").concat(size, \"px \\\"\").concat(font, \"\\\"\");\n      var pos = {\n        x: -offsetX,\n        y: radius / 2\n      };\n      context.globalAlpha = opacity;\n\n      if (fill) {\n        context.fillText(text, pos.x, pos.y);\n      } else {\n        context.strokeText(text, pos.x, pos.y);\n      }\n\n      context.globalAlpha = 1;\n    }\n  }]);\n\n  return TextDrawer;\n}();","map":{"version":3,"sources":["E:/Dev/Projects/In Progress/portfolio-backup/myportfolio/portfolio/node_modules/tsparticles/esm/Shapes/Text/TextDrawer.js"],"names":["isInArray","itemFromArray","loadFont","validTypes","TextDrawer","container","options","actualOptions","find","t","particles","shape","type","shapeOptions","map","Array","promises","character","push","Promise","allSettled","undefined","context","particle","radius","opacity","_a","_b","_c","shapeData","textData","value","textParticle","text","randomIndexData","style","weight","size","Math","round","font","fill","offsetX","length","pos","x","y","globalAlpha","fillText","strokeText"],"mappings":"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","sourcesContent":["import { isInArray, itemFromArray, loadFont } from \"../../Utils\";\nexport const validTypes = [\"text\", \"character\", \"char\"];\nexport class TextDrawer {\n    getSidesCount() {\n        return 12;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (validTypes.find((t) => isInArray(t, options.particles.shape.type))) {\n            const shapeOptions = validTypes.map((t) => options.particles.shape.options[t]).find((t) => !!t);\n            if (shapeOptions instanceof Array) {\n                const promises = [];\n                for (const character of shapeOptions) {\n                    promises.push(loadFont(character));\n                }\n                await Promise.allSettled(promises);\n            }\n            else {\n                if (shapeOptions !== undefined) {\n                    await loadFont(shapeOptions);\n                }\n            }\n        }\n    }\n    draw(context, particle, radius, opacity) {\n        var _a, _b, _c;\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        const textParticle = particle;\n        if (textParticle.text === undefined) {\n            textParticle.text =\n                textData instanceof Array ? itemFromArray(textData, particle.randomIndexData) : textData;\n        }\n        const text = textParticle.text;\n        const style = (_a = character.style) !== null && _a !== void 0 ? _a : \"\";\n        const weight = (_b = character.weight) !== null && _b !== void 0 ? _b : \"400\";\n        const size = Math.round(radius) * 2;\n        const font = (_c = character.font) !== null && _c !== void 0 ? _c : \"Verdana\";\n        const fill = particle.fill;\n        const offsetX = (text.length * radius) / 2;\n        context.font = `${style} ${weight} ${size}px \"${font}\"`;\n        const pos = {\n            x: -offsetX,\n            y: radius / 2,\n        };\n        context.globalAlpha = opacity;\n        if (fill) {\n            context.fillText(text, pos.x, pos.y);\n        }\n        else {\n            context.strokeText(text, pos.x, pos.y);\n        }\n        context.globalAlpha = 1;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}