{"ast":null,"code":"import _slicedToArray from \"/home/dnis/Dev/portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/home/dnis/Dev/portfolio/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/home/dnis/Dev/portfolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/dnis/Dev/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/dnis/Dev/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/home/dnis/Dev/portfolio/node_modules/@babel/runtime/regenerator/index.js\";\nimport { clear as _clear, colorToHsl, colorToRgb, deepExtend, drawConnectLine as _drawConnectLine, drawGrabLine as _drawGrabLine, drawParticle as _drawParticle, drawParticlePlugin as _drawParticlePlugin, drawPlugin as _drawPlugin, getStyleFromHsl, getStyleFromRgb, gradient, paintBase as _paintBase } from \"../Utils\";\nimport { Constants } from \"./Utils\";\nexport var Canvas = /*#__PURE__*/function () {\n  function Canvas(container) {\n    _classCallCheck(this, Canvas);\n\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this.context = null;\n    this.generatedCanvas = false;\n  }\n\n  _createClass(Canvas, [{\n    key: \"init\",\n    value: function init() {\n      this.resize();\n      this.initStyle();\n      this.initCover();\n      this.initTrail();\n      this.initBackground();\n      this.paint();\n    }\n  }, {\n    key: \"loadCanvas\",\n    value: function loadCanvas(canvas) {\n      var _a;\n\n      if (this.generatedCanvas) {\n        (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n      }\n\n      this.generatedCanvas = canvas.dataset && Constants.generatedAttribute in canvas.dataset ? canvas.dataset[Constants.generatedAttribute] === \"true\" : this.generatedCanvas;\n      this.element = canvas;\n      this.originalStyle = deepExtend({}, this.element.style);\n      this.size.height = canvas.offsetHeight;\n      this.size.width = canvas.offsetWidth;\n      this.context = this.element.getContext(\"2d\");\n      this.container.retina.init();\n      this.initBackground();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this = this;\n\n      var _a;\n\n      if (this.generatedCanvas) {\n        (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n      }\n\n      this.draw(function (ctx) {\n        _clear(ctx, _this.size);\n      });\n    }\n  }, {\n    key: \"paint\",\n    value: function paint() {\n      var _this2 = this;\n\n      var options = this.container.actualOptions;\n      this.draw(function (ctx) {\n        if (options.backgroundMask.enable && options.backgroundMask.cover && _this2.coverColor) {\n          _clear(ctx, _this2.size);\n\n          _this2.paintBase(getStyleFromRgb(_this2.coverColor, _this2.coverColor.a));\n        } else {\n          _this2.paintBase();\n        }\n      });\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _this3 = this;\n\n      var options = this.container.actualOptions;\n      var trail = options.particles.move.trail;\n\n      if (options.backgroundMask.enable) {\n        this.paint();\n      } else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n        this.paintBase(getStyleFromRgb(this.trailFillColor, 1 / trail.length));\n      } else {\n        this.draw(function (ctx) {\n          _clear(ctx, _this3.size);\n        });\n      }\n    }\n  }, {\n    key: \"windowResize\",\n    value: function () {\n      var _windowResize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var container, needsRefresh, _iterator, _step, _step$value, plugin;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.element) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                container = this.container;\n                this.resize();\n                needsRefresh = container.updateActualOptions();\n                container.particles.setDensity();\n                _iterator = _createForOfIteratorHelper(container.plugins);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    _step$value = _slicedToArray(_step.value, 2), plugin = _step$value[1];\n\n                    if (plugin.resize !== undefined) {\n                      plugin.resize();\n                    }\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                if (!needsRefresh) {\n                  _context.next = 11;\n                  break;\n                }\n\n                _context.next = 11;\n                return container.refresh();\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function windowResize() {\n        return _windowResize.apply(this, arguments);\n      }\n\n      return windowResize;\n    }()\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      if (!this.element) {\n        return;\n      }\n\n      var container = this.container;\n      var pxRatio = container.retina.pixelRatio;\n      var size = container.canvas.size;\n      var oldSize = {\n        width: size.width,\n        height: size.height\n      };\n      size.width = this.element.offsetWidth * pxRatio;\n      size.height = this.element.offsetHeight * pxRatio;\n      this.element.width = size.width;\n      this.element.height = size.height;\n\n      if (this.container.started) {\n        this.resizeFactor = {\n          width: size.width / oldSize.width,\n          height: size.height / oldSize.height\n        };\n      }\n    }\n  }, {\n    key: \"drawConnectLine\",\n    value: function drawConnectLine(p1, p2) {\n      var _this4 = this;\n\n      this.draw(function (ctx) {\n        var _a;\n\n        var lineStyle = _this4.lineStyle(p1, p2);\n\n        if (!lineStyle) {\n          return;\n        }\n\n        var pos1 = p1.getPosition();\n        var pos2 = p2.getPosition();\n\n        _drawConnectLine(ctx, (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : _this4.container.retina.linksWidth, lineStyle, pos1, pos2);\n      });\n    }\n  }, {\n    key: \"drawGrabLine\",\n    value: function drawGrabLine(particle, lineColor, opacity, mousePos) {\n      var container = this.container;\n      this.draw(function (ctx) {\n        var _a;\n\n        var beginPos = particle.getPosition();\n\n        _drawGrabLine(ctx, (_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n      });\n    }\n  }, {\n    key: \"drawParticle\",\n    value: function drawParticle(particle, delta) {\n      var _this5 = this;\n\n      var _a, _b, _c, _d, _e, _f;\n\n      if (particle.spawning || particle.destroyed) {\n        return;\n      }\n\n      var pfColor = particle.getFillColor();\n      var psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n\n      if (!pfColor && !psColor) {\n        return;\n      }\n\n      var _this$getPluginPartic = this.getPluginParticleColors(particle),\n          _this$getPluginPartic2 = _slicedToArray(_this$getPluginPartic, 2),\n          fColor = _this$getPluginPartic2[0],\n          sColor = _this$getPluginPartic2[1];\n\n      var pOptions = particle.options;\n      var twinkle = pOptions.twinkle.particles;\n      var twinkling = twinkle.enable && Math.random() < twinkle.frequency;\n\n      if (!fColor || !sColor) {\n        var twinkleRgb = colorToHsl(twinkle.color);\n\n        if (!fColor) {\n          fColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : pfColor ? pfColor : undefined;\n        }\n\n        if (!sColor) {\n          sColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : psColor ? psColor : undefined;\n        }\n      }\n\n      var options = this.container.actualOptions;\n      var zIndexOptions = particle.options.zIndex;\n      var zOpacityFactor = Math.pow(1 - particle.zIndexFactor, zIndexOptions.opacityRate);\n      var radius = particle.getRadius();\n      var opacity = twinkling ? twinkle.opacity : (_d = (_b = particle.bubble.opacity) !== null && _b !== void 0 ? _b : (_c = particle.opacity) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : 1;\n      var strokeOpacity = (_f = (_e = particle.stroke) === null || _e === void 0 ? void 0 : _e.opacity) !== null && _f !== void 0 ? _f : opacity;\n      var zOpacity = opacity * zOpacityFactor;\n      var fillColorValue = fColor ? getStyleFromHsl(fColor, zOpacity) : undefined;\n\n      if (!fillColorValue && !sColor) {\n        return;\n      }\n\n      this.draw(function (ctx) {\n        var zSizeFactor = Math.pow(1 - particle.zIndexFactor, zIndexOptions.sizeRate);\n        var zStrokeOpacity = strokeOpacity * zOpacityFactor;\n        var strokeColorValue = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : fillColorValue;\n\n        if (radius <= 0) {\n          return;\n        }\n\n        var container = _this5.container;\n\n        var _iterator2 = _createForOfIteratorHelper(container.particles.updaters),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var updater = _step2.value;\n\n            if (updater.beforeDraw) {\n              updater.beforeDraw(particle);\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        _drawParticle(_this5.container, ctx, particle, delta, fillColorValue, strokeColorValue, options.backgroundMask.enable, options.backgroundMask.composite, radius * zSizeFactor, zOpacity, particle.options.shadow, particle.gradient);\n\n        var _iterator3 = _createForOfIteratorHelper(container.particles.updaters),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _updater = _step3.value;\n\n            if (_updater.afterDraw) {\n              _updater.afterDraw(particle);\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      });\n    }\n  }, {\n    key: \"drawPlugin\",\n    value: function drawPlugin(plugin, delta) {\n      this.draw(function (ctx) {\n        _drawPlugin(ctx, plugin, delta);\n      });\n    }\n  }, {\n    key: \"drawParticlePlugin\",\n    value: function drawParticlePlugin(plugin, particle, delta) {\n      this.draw(function (ctx) {\n        _drawParticlePlugin(ctx, plugin, particle, delta);\n      });\n    }\n  }, {\n    key: \"initBackground\",\n    value: function initBackground() {\n      var options = this.container.actualOptions;\n      var background = options.background;\n      var element = this.element;\n      var elementStyle = element === null || element === void 0 ? void 0 : element.style;\n\n      if (!elementStyle) {\n        return;\n      }\n\n      if (background.color) {\n        var color = colorToRgb(background.color);\n        elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n      } else {\n        elementStyle.backgroundColor = \"\";\n      }\n\n      elementStyle.backgroundImage = background.image || \"\";\n      elementStyle.backgroundPosition = background.position || \"\";\n      elementStyle.backgroundRepeat = background.repeat || \"\";\n      elementStyle.backgroundSize = background.size || \"\";\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(cb) {\n      if (!this.context) {\n        return;\n      }\n\n      return cb(this.context);\n    }\n  }, {\n    key: \"initCover\",\n    value: function initCover() {\n      var options = this.container.actualOptions;\n      var cover = options.backgroundMask.cover;\n      var color = cover.color;\n      var coverRgb = colorToRgb(color);\n\n      if (coverRgb) {\n        this.coverColor = {\n          r: coverRgb.r,\n          g: coverRgb.g,\n          b: coverRgb.b,\n          a: cover.opacity\n        };\n      }\n    }\n  }, {\n    key: \"initTrail\",\n    value: function initTrail() {\n      var options = this.container.actualOptions;\n      var trail = options.particles.move.trail;\n      var fillColor = colorToRgb(trail.fillColor);\n\n      if (fillColor) {\n        var _trail = options.particles.move.trail;\n        this.trailFillColor = {\n          r: fillColor.r,\n          g: fillColor.g,\n          b: fillColor.b,\n          a: 1 / _trail.length\n        };\n      }\n    }\n  }, {\n    key: \"getPluginParticleColors\",\n    value: function getPluginParticleColors(particle) {\n      var fColor;\n      var sColor;\n\n      var _iterator4 = _createForOfIteratorHelper(this.container.plugins),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _step4$value = _slicedToArray(_step4.value, 2),\n              plugin = _step4$value[1];\n\n          if (!fColor && plugin.particleFillColor) {\n            fColor = colorToHsl(plugin.particleFillColor(particle));\n          }\n\n          if (!sColor && plugin.particleStrokeColor) {\n            sColor = colorToHsl(plugin.particleStrokeColor(particle));\n          }\n\n          if (fColor && sColor) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return [fColor, sColor];\n    }\n  }, {\n    key: \"initStyle\",\n    value: function initStyle() {\n      var element = this.element,\n          options = this.container.actualOptions;\n\n      if (!element) {\n        return;\n      }\n\n      var originalStyle = this.originalStyle;\n\n      if (options.fullScreen.enable) {\n        this.originalStyle = deepExtend({}, element.style);\n        element.style.setProperty(\"position\", \"fixed\", \"important\");\n        element.style.setProperty(\"z-index\", options.fullScreen.zIndex.toString(10), \"important\");\n        element.style.setProperty(\"top\", \"0\", \"important\");\n        element.style.setProperty(\"left\", \"0\", \"important\");\n        element.style.setProperty(\"width\", \"100%\", \"important\");\n        element.style.setProperty(\"height\", \"100%\", \"important\");\n      } else if (originalStyle) {\n        element.style.position = originalStyle.position;\n        element.style.zIndex = originalStyle.zIndex;\n        element.style.top = originalStyle.top;\n        element.style.left = originalStyle.left;\n        element.style.width = originalStyle.width;\n        element.style.height = originalStyle.height;\n      }\n\n      for (var key in options.style) {\n        if (!key || !options.style) {\n          continue;\n        }\n\n        var value = options.style[key];\n\n        if (!value) {\n          continue;\n        }\n\n        element.style.setProperty(key, value, \"important\");\n      }\n    }\n  }, {\n    key: \"paintBase\",\n    value: function paintBase(baseColor) {\n      var _this6 = this;\n\n      this.draw(function (ctx) {\n        _paintBase(ctx, _this6.size, baseColor);\n      });\n    }\n  }, {\n    key: \"lineStyle\",\n    value: function lineStyle(p1, p2) {\n      var _this7 = this;\n\n      return this.draw(function (ctx) {\n        var options = _this7.container.actualOptions;\n        var connectOptions = options.interactivity.modes.connect;\n        return gradient(ctx, p1, p2, connectOptions.links.opacity);\n      });\n    }\n  }]);\n\n  return Canvas;\n}();","map":{"version":3,"sources":["/home/dnis/Dev/portfolio/node_modules/tsparticles/esm/Core/Canvas.js"],"names":["clear","colorToHsl","colorToRgb","deepExtend","drawConnectLine","drawGrabLine","drawParticle","drawParticlePlugin","drawPlugin","getStyleFromHsl","getStyleFromRgb","gradient","paintBase","Constants","Canvas","container","size","height","width","context","generatedCanvas","resize","initStyle","initCover","initTrail","initBackground","paint","canvas","_a","element","remove","dataset","generatedAttribute","originalStyle","style","offsetHeight","offsetWidth","getContext","retina","init","draw","ctx","options","actualOptions","backgroundMask","enable","cover","coverColor","a","trail","particles","move","length","trailFillColor","needsRefresh","updateActualOptions","setDensity","plugins","plugin","undefined","refresh","pxRatio","pixelRatio","oldSize","started","resizeFactor","p1","p2","lineStyle","pos1","getPosition","pos2","linksWidth","particle","lineColor","opacity","mousePos","beginPos","delta","_b","_c","_d","_e","_f","spawning","destroyed","pfColor","getFillColor","psColor","getStrokeColor","getPluginParticleColors","fColor","sColor","pOptions","twinkle","twinkling","Math","random","frequency","twinkleRgb","color","zIndexOptions","zIndex","zOpacityFactor","zIndexFactor","opacityRate","radius","getRadius","bubble","value","strokeOpacity","stroke","zOpacity","fillColorValue","zSizeFactor","sizeRate","zStrokeOpacity","strokeColorValue","updaters","updater","beforeDraw","composite","shadow","afterDraw","background","elementStyle","backgroundColor","backgroundImage","image","backgroundPosition","position","backgroundRepeat","repeat","backgroundSize","cb","coverRgb","r","g","b","fillColor","particleFillColor","particleStrokeColor","fullScreen","setProperty","toString","top","left","key","baseColor","connectOptions","interactivity","modes","connect","links"],"mappings":"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","sourcesContent":["import { clear, colorToHsl, colorToRgb, deepExtend, drawConnectLine, drawGrabLine, drawParticle, drawParticlePlugin, drawPlugin, getStyleFromHsl, getStyleFromRgb, gradient, paintBase, } from \"../Utils\";\nimport { Constants } from \"./Utils\";\nexport class Canvas {\n    constructor(container) {\n        this.container = container;\n        this.size = {\n            height: 0,\n            width: 0,\n        };\n        this.context = null;\n        this.generatedCanvas = false;\n    }\n    init() {\n        this.resize();\n        this.initStyle();\n        this.initCover();\n        this.initTrail();\n        this.initBackground();\n        this.paint();\n    }\n    loadCanvas(canvas) {\n        var _a;\n        if (this.generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this.generatedCanvas =\n            canvas.dataset && Constants.generatedAttribute in canvas.dataset\n                ? canvas.dataset[Constants.generatedAttribute] === \"true\"\n                : this.generatedCanvas;\n        this.element = canvas;\n        this.originalStyle = deepExtend({}, this.element.style);\n        this.size.height = canvas.offsetHeight;\n        this.size.width = canvas.offsetWidth;\n        this.context = this.element.getContext(\"2d\");\n        this.container.retina.init();\n        this.initBackground();\n    }\n    destroy() {\n        var _a;\n        if (this.generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this.draw((ctx) => {\n            clear(ctx, this.size);\n        });\n    }\n    paint() {\n        const options = this.container.actualOptions;\n        this.draw((ctx) => {\n            if (options.backgroundMask.enable && options.backgroundMask.cover && this.coverColor) {\n                clear(ctx, this.size);\n                this.paintBase(getStyleFromRgb(this.coverColor, this.coverColor.a));\n            }\n            else {\n                this.paintBase();\n            }\n        });\n    }\n    clear() {\n        const options = this.container.actualOptions;\n        const trail = options.particles.move.trail;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n            this.paintBase(getStyleFromRgb(this.trailFillColor, 1 / trail.length));\n        }\n        else {\n            this.draw((ctx) => {\n                clear(ctx, this.size);\n            });\n        }\n    }\n    async windowResize() {\n        if (!this.element) {\n            return;\n        }\n        const container = this.container;\n        this.resize();\n        const needsRefresh = container.updateActualOptions();\n        container.particles.setDensity();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.resize !== undefined) {\n                plugin.resize();\n            }\n        }\n        if (needsRefresh) {\n            await container.refresh();\n        }\n    }\n    resize() {\n        if (!this.element) {\n            return;\n        }\n        const container = this.container;\n        const pxRatio = container.retina.pixelRatio;\n        const size = container.canvas.size;\n        const oldSize = {\n            width: size.width,\n            height: size.height,\n        };\n        size.width = this.element.offsetWidth * pxRatio;\n        size.height = this.element.offsetHeight * pxRatio;\n        this.element.width = size.width;\n        this.element.height = size.height;\n        if (this.container.started) {\n            this.resizeFactor = {\n                width: size.width / oldSize.width,\n                height: size.height / oldSize.height,\n            };\n        }\n    }\n    drawConnectLine(p1, p2) {\n        this.draw((ctx) => {\n            var _a;\n            const lineStyle = this.lineStyle(p1, p2);\n            if (!lineStyle) {\n                return;\n            }\n            const pos1 = p1.getPosition();\n            const pos2 = p2.getPosition();\n            drawConnectLine(ctx, (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);\n        });\n    }\n    drawGrabLine(particle, lineColor, opacity, mousePos) {\n        const container = this.container;\n        this.draw((ctx) => {\n            var _a;\n            const beginPos = particle.getPosition();\n            drawGrabLine(ctx, (_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n        });\n    }\n    drawParticle(particle, delta) {\n        var _a, _b, _c, _d, _e, _f;\n        if (particle.spawning || particle.destroyed) {\n            return;\n        }\n        const pfColor = particle.getFillColor();\n        const psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n        if (!pfColor && !psColor) {\n            return;\n        }\n        let [fColor, sColor] = this.getPluginParticleColors(particle);\n        const pOptions = particle.options;\n        const twinkle = pOptions.twinkle.particles;\n        const twinkling = twinkle.enable && Math.random() < twinkle.frequency;\n        if (!fColor || !sColor) {\n            const twinkleRgb = colorToHsl(twinkle.color);\n            if (!fColor) {\n                fColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : pfColor ? pfColor : undefined;\n            }\n            if (!sColor) {\n                sColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : psColor ? psColor : undefined;\n            }\n        }\n        const options = this.container.actualOptions;\n        const zIndexOptions = particle.options.zIndex;\n        const zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate;\n        const radius = particle.getRadius();\n        const opacity = twinkling ? twinkle.opacity : (_d = (_b = particle.bubble.opacity) !== null && _b !== void 0 ? _b : (_c = particle.opacity) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : 1;\n        const strokeOpacity = (_f = (_e = particle.stroke) === null || _e === void 0 ? void 0 : _e.opacity) !== null && _f !== void 0 ? _f : opacity;\n        const zOpacity = opacity * zOpacityFactor;\n        const fillColorValue = fColor ? getStyleFromHsl(fColor, zOpacity) : undefined;\n        if (!fillColorValue && !sColor) {\n            return;\n        }\n        this.draw((ctx) => {\n            const zSizeFactor = (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate;\n            const zStrokeOpacity = strokeOpacity * zOpacityFactor;\n            const strokeColorValue = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : fillColorValue;\n            if (radius <= 0) {\n                return;\n            }\n            const container = this.container;\n            for (const updater of container.particles.updaters) {\n                if (updater.beforeDraw) {\n                    updater.beforeDraw(particle);\n                }\n            }\n            drawParticle(this.container, ctx, particle, delta, fillColorValue, strokeColorValue, options.backgroundMask.enable, options.backgroundMask.composite, radius * zSizeFactor, zOpacity, particle.options.shadow, particle.gradient);\n            for (const updater of container.particles.updaters) {\n                if (updater.afterDraw) {\n                    updater.afterDraw(particle);\n                }\n            }\n        });\n    }\n    drawPlugin(plugin, delta) {\n        this.draw((ctx) => {\n            drawPlugin(ctx, plugin, delta);\n        });\n    }\n    drawParticlePlugin(plugin, particle, delta) {\n        this.draw((ctx) => {\n            drawParticlePlugin(ctx, plugin, particle, delta);\n        });\n    }\n    initBackground() {\n        const options = this.container.actualOptions;\n        const background = options.background;\n        const element = this.element;\n        const elementStyle = element === null || element === void 0 ? void 0 : element.style;\n        if (!elementStyle) {\n            return;\n        }\n        if (background.color) {\n            const color = colorToRgb(background.color);\n            elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n        }\n        else {\n            elementStyle.backgroundColor = \"\";\n        }\n        elementStyle.backgroundImage = background.image || \"\";\n        elementStyle.backgroundPosition = background.position || \"\";\n        elementStyle.backgroundRepeat = background.repeat || \"\";\n        elementStyle.backgroundSize = background.size || \"\";\n    }\n    draw(cb) {\n        if (!this.context) {\n            return;\n        }\n        return cb(this.context);\n    }\n    initCover() {\n        const options = this.container.actualOptions;\n        const cover = options.backgroundMask.cover;\n        const color = cover.color;\n        const coverRgb = colorToRgb(color);\n        if (coverRgb) {\n            this.coverColor = {\n                r: coverRgb.r,\n                g: coverRgb.g,\n                b: coverRgb.b,\n                a: cover.opacity,\n            };\n        }\n    }\n    initTrail() {\n        const options = this.container.actualOptions;\n        const trail = options.particles.move.trail;\n        const fillColor = colorToRgb(trail.fillColor);\n        if (fillColor) {\n            const trail = options.particles.move.trail;\n            this.trailFillColor = {\n                r: fillColor.r,\n                g: fillColor.g,\n                b: fillColor.b,\n                a: 1 / trail.length,\n            };\n        }\n    }\n    getPluginParticleColors(particle) {\n        let fColor;\n        let sColor;\n        for (const [, plugin] of this.container.plugins) {\n            if (!fColor && plugin.particleFillColor) {\n                fColor = colorToHsl(plugin.particleFillColor(particle));\n            }\n            if (!sColor && plugin.particleStrokeColor) {\n                sColor = colorToHsl(plugin.particleStrokeColor(particle));\n            }\n            if (fColor && sColor) {\n                break;\n            }\n        }\n        return [fColor, sColor];\n    }\n    initStyle() {\n        const element = this.element, options = this.container.actualOptions;\n        if (!element) {\n            return;\n        }\n        const originalStyle = this.originalStyle;\n        if (options.fullScreen.enable) {\n            this.originalStyle = deepExtend({}, element.style);\n            element.style.setProperty(\"position\", \"fixed\", \"important\");\n            element.style.setProperty(\"z-index\", options.fullScreen.zIndex.toString(10), \"important\");\n            element.style.setProperty(\"top\", \"0\", \"important\");\n            element.style.setProperty(\"left\", \"0\", \"important\");\n            element.style.setProperty(\"width\", \"100%\", \"important\");\n            element.style.setProperty(\"height\", \"100%\", \"important\");\n        }\n        else if (originalStyle) {\n            element.style.position = originalStyle.position;\n            element.style.zIndex = originalStyle.zIndex;\n            element.style.top = originalStyle.top;\n            element.style.left = originalStyle.left;\n            element.style.width = originalStyle.width;\n            element.style.height = originalStyle.height;\n        }\n        for (const key in options.style) {\n            if (!key || !options.style) {\n                continue;\n            }\n            const value = options.style[key];\n            if (!value) {\n                continue;\n            }\n            element.style.setProperty(key, value, \"important\");\n        }\n    }\n    paintBase(baseColor) {\n        this.draw((ctx) => {\n            paintBase(ctx, this.size, baseColor);\n        });\n    }\n    lineStyle(p1, p2) {\n        return this.draw((ctx) => {\n            const options = this.container.actualOptions;\n            const connectOptions = options.interactivity.modes.connect;\n            return gradient(ctx, p1, p2, connectOptions.links.opacity);\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}