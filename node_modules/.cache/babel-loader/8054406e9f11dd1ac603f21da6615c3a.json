{"ast":null,"code":"import _classCallCheck from \"E:/Dev/Projects/In Progress/portfolio-backup/myportfolio/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Dev/Projects/In Progress/portfolio-backup/myportfolio/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar _ShapeManager_engine;\n\nvar shapes = new Map();\nexport var ShapeManager = /*#__PURE__*/function () {\n  function ShapeManager(engine) {\n    _classCallCheck(this, ShapeManager);\n\n    _ShapeManager_engine.set(this, void 0);\n\n    __classPrivateFieldSet(this, _ShapeManager_engine, engine, \"f\");\n  }\n\n  _createClass(ShapeManager, [{\n    key: \"addShape\",\n    value: function addShape(name, drawer) {\n      if (!this.getShape(name)) {\n        shapes.set(name, drawer);\n      }\n    }\n  }, {\n    key: \"getShape\",\n    value: function getShape(name) {\n      return shapes.get(name);\n    }\n  }, {\n    key: \"getSupportedShapes\",\n    value: function getSupportedShapes() {\n      return shapes.keys();\n    }\n  }]);\n\n  return ShapeManager;\n}();\n_ShapeManager_engine = new WeakMap();","map":{"version":3,"sources":["E:/Dev/Projects/In Progress/portfolio-backup/myportfolio/portfolio/node_modules/tsparticles/esm/Plugins/Emitters/ShapeManager.js"],"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","_ShapeManager_engine","shapes","Map","ShapeManager","engine","name","drawer","getShape","get","keys","WeakMap"],"mappings":";;;AAAA,IAAIA,sBAAsB,GAAI,QAAQ,KAAKA,sBAAd,IAAyC,UAAUC,QAAV,EAAoBC,KAApB,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwCC,CAAxC,EAA2C;AAC7G,MAAID,IAAI,KAAK,GAAb,EAAkB,MAAM,IAAIE,SAAJ,CAAc,gCAAd,CAAN;AAClB,MAAIF,IAAI,KAAK,GAAT,IAAgB,CAACC,CAArB,EAAwB,MAAM,IAAIC,SAAJ,CAAc,+CAAd,CAAN;AACxB,MAAI,OAAOJ,KAAP,KAAiB,UAAjB,GAA8BD,QAAQ,KAAKC,KAAb,IAAsB,CAACG,CAArD,GAAyD,CAACH,KAAK,CAACK,GAAN,CAAUN,QAAV,CAA9D,EAAmF,MAAM,IAAIK,SAAJ,CAAc,yEAAd,CAAN;AACnF,SAAQF,IAAI,KAAK,GAAT,GAAeC,CAAC,CAACG,IAAF,CAAOP,QAAP,EAAiBE,KAAjB,CAAf,GAAyCE,CAAC,GAAGA,CAAC,CAACF,KAAF,GAAUA,KAAb,GAAqBD,KAAK,CAACO,GAAN,CAAUR,QAAV,EAAoBE,KAApB,CAAhE,EAA6FA,KAApG;AACH,CALD;;AAMA,IAAIO,oBAAJ;;AACA,IAAMC,MAAM,GAAG,IAAIC,GAAJ,EAAf;AACA,WAAaC,YAAb;AACI,wBAAYC,MAAZ,EAAoB;AAAA;;AAChBJ,IAAAA,oBAAoB,CAACD,GAArB,CAAyB,IAAzB,EAA+B,KAAK,CAApC;;AACAT,IAAAA,sBAAsB,CAAC,IAAD,EAAOU,oBAAP,EAA6BI,MAA7B,EAAqC,GAArC,CAAtB;AACH;;AAJL;AAAA;AAAA,WAKI,kBAASC,IAAT,EAAeC,MAAf,EAAuB;AACnB,UAAI,CAAC,KAAKC,QAAL,CAAcF,IAAd,CAAL,EAA0B;AACtBJ,QAAAA,MAAM,CAACF,GAAP,CAAWM,IAAX,EAAiBC,MAAjB;AACH;AACJ;AATL;AAAA;AAAA,WAUI,kBAASD,IAAT,EAAe;AACX,aAAOJ,MAAM,CAACO,GAAP,CAAWH,IAAX,CAAP;AACH;AAZL;AAAA;AAAA,WAaI,8BAAqB;AACjB,aAAOJ,MAAM,CAACQ,IAAP,EAAP;AACH;AAfL;;AAAA;AAAA;AAiBAT,oBAAoB,GAAG,IAAIU,OAAJ,EAAvB","sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _ShapeManager_engine;\nconst shapes = new Map();\nexport class ShapeManager {\n    constructor(engine) {\n        _ShapeManager_engine.set(this, void 0);\n        __classPrivateFieldSet(this, _ShapeManager_engine, engine, \"f\");\n    }\n    addShape(name, drawer) {\n        if (!this.getShape(name)) {\n            shapes.set(name, drawer);\n        }\n    }\n    getShape(name) {\n        return shapes.get(name);\n    }\n    getSupportedShapes() {\n        return shapes.keys();\n    }\n}\n_ShapeManager_engine = new WeakMap();\n"]},"metadata":{},"sourceType":"module"}