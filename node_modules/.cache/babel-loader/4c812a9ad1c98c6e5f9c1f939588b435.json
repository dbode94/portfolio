{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/dnis/Dev/portfolio/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/home/dnis/Dev/portfolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/dnis/Dev/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/dnis/Dev/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/dnis/Dev/portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/dnis/Dev/portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/home/dnis/Dev/portfolio/node_modules/@babel/runtime/regenerator/index.js\";\nimport { Circle, Constants, ExternalInteractorBase, Rectangle } from \"../../../Core\";\nimport { clamp, colorMix, colorToHsl, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromArray, rgbToHsl } from \"../../../Utils\";\n\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n  if (modeValue >= optionsValue) {\n    var value = particleValue + (modeValue - optionsValue) * ratio;\n    return clamp(value, particleValue, modeValue);\n  } else if (modeValue < optionsValue) {\n    var _value = particleValue - (optionsValue - modeValue) * ratio;\n\n    return clamp(_value, modeValue, particleValue);\n  }\n}\n\nexport var Bubbler = /*#__PURE__*/function (_ExternalInteractorBa) {\n  _inherits(Bubbler, _ExternalInteractorBa);\n\n  var _super = _createSuper(Bubbler);\n\n  function Bubbler(container) {\n    _classCallCheck(this, Bubbler);\n\n    return _super.call(this, container);\n  }\n\n  _createClass(Bubbler, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      var container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = options.interactivity.events,\n          divs = events.onDiv,\n          divBubble = isDivModeEnabled(\"bubble\", divs);\n\n      if (!(divBubble || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n        return false;\n      }\n\n      var hoverMode = events.onHover.mode;\n      var clickMode = events.onClick.mode;\n      return isInArray(\"bubble\", hoverMode) || isInArray(\"bubble\", clickMode) || divBubble;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(particle, force) {\n      if (!(!particle.bubble.inRange || force)) {\n        return;\n      }\n\n      delete particle.bubble.div;\n      delete particle.bubble.opacity;\n      delete particle.bubble.radius;\n      delete particle.bubble.color;\n    }\n  }, {\n    key: \"interact\",\n    value: function () {\n      var _interact = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var options, events, onHover, onClick, hoverEnabled, hoverMode, clickEnabled, clickMode, divs;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n\n                if (hoverEnabled && isInArray(\"bubble\", hoverMode)) {\n                  this.hoverBubble();\n                } else if (clickEnabled && isInArray(\"bubble\", clickMode)) {\n                  this.clickBubble();\n                } else {\n                  divModeExecute(\"bubble\", divs, function (selector, div) {\n                    return _this.singleSelectorHover(selector, div);\n                  });\n                }\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function interact() {\n        return _interact.apply(this, arguments);\n      }\n\n      return interact;\n    }()\n  }, {\n    key: \"singleSelectorHover\",\n    value: function singleSelectorHover(selector, div) {\n      var _this2 = this;\n\n      var container = this.container,\n          selectors = document.querySelectorAll(selector);\n\n      if (!selectors.length) {\n        return;\n      }\n\n      selectors.forEach(function (item) {\n        var elem = item,\n            pxRatio = container.retina.pixelRatio,\n            pos = {\n          x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n          y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n        },\n            repulseRadius = elem.offsetWidth / 2 * pxRatio,\n            area = div.type === \"circle\" ? new Circle(pos.x, pos.y, repulseRadius) : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio),\n            query = container.particles.quadTree.query(area);\n\n        var _iterator = _createForOfIteratorHelper(query),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var particle = _step.value;\n\n            if (!area.contains(particle.getPosition())) {\n              continue;\n            }\n\n            particle.bubble.inRange = true;\n            var divs = container.actualOptions.interactivity.modes.bubble.divs;\n            var divBubble = divMode(divs, elem);\n\n            if (!particle.bubble.div || particle.bubble.div !== elem) {\n              _this2.reset(particle, true);\n\n              particle.bubble.div = elem;\n            }\n\n            _this2.hoverBubbleSize(particle, 1, divBubble);\n\n            _this2.hoverBubbleOpacity(particle, 1, divBubble);\n\n            _this2.hoverBubbleColor(particle, 1, divBubble);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      });\n    }\n  }, {\n    key: \"process\",\n    value: function process(particle, distMouse, timeSpent, data) {\n      var container = this.container,\n          bubbleParam = data.bubbleObj.optValue;\n\n      if (bubbleParam === undefined) {\n        return;\n      }\n\n      var options = container.actualOptions,\n          bubbleDuration = options.interactivity.modes.bubble.duration,\n          bubbleDistance = container.retina.bubbleModeDistance,\n          particlesParam = data.particlesObj.optValue,\n          pObjBubble = data.bubbleObj.value,\n          pObj = data.particlesObj.value || 0,\n          type = data.type;\n\n      if (bubbleParam === particlesParam) {\n        return;\n      }\n\n      if (!container.bubble.durationEnd) {\n        if (distMouse <= bubbleDistance) {\n          var obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n\n          if (obj !== bubbleParam) {\n            var value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;\n\n            if (type === \"size\") {\n              particle.bubble.radius = value;\n            }\n\n            if (type === \"opacity\") {\n              particle.bubble.opacity = value;\n            }\n          }\n        } else {\n          if (type === \"size\") {\n            delete particle.bubble.radius;\n          }\n\n          if (type === \"opacity\") {\n            delete particle.bubble.opacity;\n          }\n        }\n      } else if (pObjBubble) {\n        if (type === \"size\") {\n          delete particle.bubble.radius;\n        }\n\n        if (type === \"opacity\") {\n          delete particle.bubble.opacity;\n        }\n      }\n    }\n  }, {\n    key: \"clickBubble\",\n    value: function clickBubble() {\n      var _a, _b;\n\n      var container = this.container,\n          options = container.actualOptions,\n          mouseClickPos = container.interactivity.mouse.clickPosition;\n\n      if (!mouseClickPos) {\n        return;\n      }\n\n      var distance = container.retina.bubbleModeDistance,\n          query = container.particles.quadTree.queryCircle(mouseClickPos, distance);\n\n      var _iterator2 = _createForOfIteratorHelper(query),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var particle = _step2.value;\n\n          if (!container.bubble.clicking) {\n            continue;\n          }\n\n          particle.bubble.inRange = !container.bubble.durationEnd;\n          var pos = particle.getPosition(),\n              distMouse = getDistance(pos, mouseClickPos),\n              timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n\n          if (timeSpent > options.interactivity.modes.bubble.duration) {\n            container.bubble.durationEnd = true;\n          }\n\n          if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n            container.bubble.clicking = false;\n            container.bubble.durationEnd = false;\n          }\n\n          var sizeData = {\n            bubbleObj: {\n              optValue: container.retina.bubbleModeSize,\n              value: particle.bubble.radius\n            },\n            particlesObj: {\n              optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n              value: particle.size.value\n            },\n            type: \"size\"\n          };\n          this.process(particle, distMouse, timeSpent, sizeData);\n          var opacityData = {\n            bubbleObj: {\n              optValue: options.interactivity.modes.bubble.opacity,\n              value: particle.bubble.opacity\n            },\n            particlesObj: {\n              optValue: getRangeMax(particle.options.opacity.value),\n              value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1\n            },\n            type: \"opacity\"\n          };\n          this.process(particle, distMouse, timeSpent, opacityData);\n\n          if (!container.bubble.durationEnd) {\n            if (distMouse <= container.retina.bubbleModeDistance) {\n              this.hoverBubbleColor(particle, distMouse);\n            } else {\n              delete particle.bubble.color;\n            }\n          } else {\n            delete particle.bubble.color;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"hoverBubble\",\n    value: function hoverBubble() {\n      var container = this.container,\n          mousePos = container.interactivity.mouse.position;\n\n      if (mousePos === undefined) {\n        return;\n      }\n\n      var distance = container.retina.bubbleModeDistance,\n          query = container.particles.quadTree.queryCircle(mousePos, distance);\n\n      var _iterator3 = _createForOfIteratorHelper(query),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var particle = _step3.value;\n          particle.bubble.inRange = true;\n          var pos = particle.getPosition(),\n              pointDistance = getDistance(pos, mousePos),\n              ratio = 1 - pointDistance / distance;\n\n          if (pointDistance <= distance) {\n            if (ratio >= 0 && container.interactivity.status === Constants.mouseMoveEvent) {\n              this.hoverBubbleSize(particle, ratio);\n              this.hoverBubbleOpacity(particle, ratio);\n              this.hoverBubbleColor(particle, ratio);\n            }\n          } else {\n            this.reset(particle);\n          }\n\n          if (container.interactivity.status === Constants.mouseLeaveEvent) {\n            this.reset(particle);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"hoverBubbleSize\",\n    value: function hoverBubbleSize(particle, ratio, divBubble) {\n      var container = this.container,\n          modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n\n      if (modeSize === undefined) {\n        return;\n      }\n\n      var optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n      var pSize = particle.size.value;\n      var size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n\n      if (size !== undefined) {\n        particle.bubble.radius = size;\n      }\n    }\n  }, {\n    key: \"hoverBubbleOpacity\",\n    value: function hoverBubbleOpacity(particle, ratio, divBubble) {\n      var _a, _b, _c;\n\n      var container = this.container,\n          options = container.actualOptions,\n          modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n\n      if (!modeOpacity) {\n        return;\n      }\n\n      var optOpacity = particle.options.opacity.value;\n      var pOpacity = (_c = (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1;\n      var opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n\n      if (opacity !== undefined) {\n        particle.bubble.opacity = opacity;\n      }\n    }\n  }, {\n    key: \"hoverBubbleColor\",\n    value: function hoverBubbleColor(particle, ratio, divBubble) {\n      var options = this.container.actualOptions;\n      var bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n\n      if (!particle.bubble.finalColor) {\n        var modeColor = bubbleOptions.color;\n\n        if (!modeColor) {\n          return;\n        }\n\n        var bubbleColor = modeColor instanceof Array ? itemFromArray(modeColor) : modeColor;\n        particle.bubble.finalColor = colorToHsl(bubbleColor);\n      }\n\n      if (!particle.bubble.finalColor) {\n        return;\n      }\n\n      if (bubbleOptions.mix) {\n        particle.bubble.color = undefined;\n        var pColor = particle.getFillColor();\n        particle.bubble.color = pColor ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio)) : particle.bubble.finalColor;\n      } else {\n        particle.bubble.color = particle.bubble.finalColor;\n      }\n    }\n  }]);\n\n  return Bubbler;\n}(ExternalInteractorBase);","map":{"version":3,"sources":["/home/dnis/Dev/portfolio/node_modules/tsparticles/esm/Interactions/External/Bubble/Bubbler.js"],"names":["Circle","Constants","ExternalInteractorBase","Rectangle","clamp","colorMix","colorToHsl","divMode","divModeExecute","getDistance","getRangeMax","isDivModeEnabled","isInArray","itemFromArray","rgbToHsl","calculateBubbleValue","particleValue","modeValue","optionsValue","ratio","value","Bubbler","container","options","actualOptions","mouse","interactivity","events","divs","onDiv","divBubble","onHover","enable","position","onClick","clickPosition","hoverMode","mode","clickMode","particle","force","bubble","inRange","div","opacity","radius","color","hoverEnabled","clickEnabled","hoverBubble","clickBubble","selector","singleSelectorHover","selectors","document","querySelectorAll","length","forEach","item","elem","pxRatio","retina","pixelRatio","pos","x","offsetLeft","offsetWidth","y","offsetTop","offsetHeight","repulseRadius","area","type","query","particles","quadTree","contains","getPosition","modes","reset","hoverBubbleSize","hoverBubbleOpacity","hoverBubbleColor","distMouse","timeSpent","data","bubbleParam","bubbleObj","optValue","undefined","bubbleDuration","duration","bubbleDistance","bubbleModeDistance","particlesParam","particlesObj","pObjBubble","pObj","durationEnd","obj","_a","_b","mouseClickPos","distance","queryCircle","clicking","Date","getTime","clickTime","sizeData","bubbleModeSize","size","process","opacityData","mousePos","pointDistance","status","mouseMoveEvent","mouseLeaveEvent","modeSize","optSize","pSize","_c","modeOpacity","optOpacity","pOpacity","bubbleOptions","finalColor","modeColor","bubbleColor","Array","mix","pColor","getFillColor"],"mappings":"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","sourcesContent":["import { Circle, Constants, ExternalInteractorBase, Rectangle } from \"../../../Core\";\nimport { clamp, colorMix, colorToHsl, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromArray, rgbToHsl, } from \"../../../Utils\";\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue >= optionsValue) {\n        const value = particleValue + (modeValue - optionsValue) * ratio;\n        return clamp(value, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const value = particleValue - (optionsValue - modeValue) * ratio;\n        return clamp(value, modeValue, particleValue);\n    }\n}\nexport class Bubbler extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled() {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = options.interactivity.events, divs = events.onDiv, divBubble = isDivModeEnabled(\"bubble\", divs);\n        if (!(divBubble || (events.onHover.enable && mouse.position) || (events.onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        const clickMode = events.onClick.mode;\n        return isInArray(\"bubble\", hoverMode) || isInArray(\"bubble\", clickMode) || divBubble;\n    }\n    reset(particle, force) {\n        if (!(!particle.bubble.inRange || force)) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    async interact() {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && isInArray(\"bubble\", hoverMode)) {\n            this.hoverBubble();\n        }\n        else if (clickEnabled && isInArray(\"bubble\", clickMode)) {\n            this.clickBubble();\n        }\n        else {\n            divModeExecute(\"bubble\", divs, (selector, div) => this.singleSelectorHover(selector, div));\n        }\n    }\n    singleSelectorHover(selector, div) {\n        const container = this.container, selectors = document.querySelectorAll(selector);\n        if (!selectors.length) {\n            return;\n        }\n        selectors.forEach((item) => {\n            const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n            }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === \"circle\"\n                ? new Circle(pos.x, pos.y, repulseRadius)\n                : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area);\n            for (const particle of query) {\n                if (!area.contains(particle.getPosition())) {\n                    continue;\n                }\n                particle.bubble.inRange = true;\n                const divs = container.actualOptions.interactivity.modes.bubble.divs;\n                const divBubble = divMode(divs, elem);\n                if (!particle.bubble.div || particle.bubble.div !== elem) {\n                    this.reset(particle, true);\n                    particle.bubble.div = elem;\n                }\n                this.hoverBubbleSize(particle, 1, divBubble);\n                this.hoverBubbleOpacity(particle, 1, divBubble);\n                this.hoverBubbleColor(particle, 1, divBubble);\n            }\n        });\n    }\n    process(particle, distMouse, timeSpent, data) {\n        const container = this.container, bubbleParam = data.bubbleObj.optValue;\n        if (bubbleParam === undefined) {\n            return;\n        }\n        const options = container.actualOptions, bubbleDuration = options.interactivity.modes.bubble.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value || 0, type = data.type;\n        if (bubbleParam === particlesParam) {\n            return;\n        }\n        if (!container.bubble.durationEnd) {\n            if (distMouse <= bubbleDistance) {\n                const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n                if (obj !== bubbleParam) {\n                    const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                    if (type === \"size\") {\n                        particle.bubble.radius = value;\n                    }\n                    if (type === \"opacity\") {\n                        particle.bubble.opacity = value;\n                    }\n                }\n            }\n            else {\n                if (type === \"size\") {\n                    delete particle.bubble.radius;\n                }\n                if (type === \"opacity\") {\n                    delete particle.bubble.opacity;\n                }\n            }\n        }\n        else if (pObjBubble) {\n            if (type === \"size\") {\n                delete particle.bubble.radius;\n            }\n            if (type === \"opacity\") {\n                delete particle.bubble.opacity;\n            }\n        }\n    }\n    clickBubble() {\n        var _a, _b;\n        const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition;\n        if (!mouseClickPos) {\n            return;\n        }\n        const distance = container.retina.bubbleModeDistance, query = container.particles.quadTree.queryCircle(mouseClickPos, distance);\n        for (const particle of query) {\n            if (!container.bubble.clicking) {\n                continue;\n            }\n            particle.bubble.inRange = !container.bubble.durationEnd;\n            const pos = particle.getPosition(), distMouse = getDistance(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n            if (timeSpent > options.interactivity.modes.bubble.duration) {\n                container.bubble.durationEnd = true;\n            }\n            if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n                container.bubble.clicking = false;\n                container.bubble.durationEnd = false;\n            }\n            const sizeData = {\n                bubbleObj: {\n                    optValue: container.retina.bubbleModeSize,\n                    value: particle.bubble.radius,\n                },\n                particlesObj: {\n                    optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n                    value: particle.size.value,\n                },\n                type: \"size\",\n            };\n            this.process(particle, distMouse, timeSpent, sizeData);\n            const opacityData = {\n                bubbleObj: {\n                    optValue: options.interactivity.modes.bubble.opacity,\n                    value: particle.bubble.opacity,\n                },\n                particlesObj: {\n                    optValue: getRangeMax(particle.options.opacity.value),\n                    value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1,\n                },\n                type: \"opacity\",\n            };\n            this.process(particle, distMouse, timeSpent, opacityData);\n            if (!container.bubble.durationEnd) {\n                if (distMouse <= container.retina.bubbleModeDistance) {\n                    this.hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n            else {\n                delete particle.bubble.color;\n            }\n        }\n    }\n    hoverBubble() {\n        const container = this.container, mousePos = container.interactivity.mouse.position;\n        if (mousePos === undefined) {\n            return;\n        }\n        const distance = container.retina.bubbleModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance);\n        for (const particle of query) {\n            particle.bubble.inRange = true;\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos), ratio = 1 - pointDistance / distance;\n            if (pointDistance <= distance) {\n                if (ratio >= 0 && container.interactivity.status === Constants.mouseMoveEvent) {\n                    this.hoverBubbleSize(particle, ratio);\n                    this.hoverBubbleOpacity(particle, ratio);\n                    this.hoverBubbleColor(particle, ratio);\n                }\n            }\n            else {\n                this.reset(particle);\n            }\n            if (container.interactivity.status === Constants.mouseLeaveEvent) {\n                this.reset(particle);\n            }\n        }\n    }\n    hoverBubbleSize(particle, ratio, divBubble) {\n        const container = this.container, modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n        if (modeSize === undefined) {\n            return;\n        }\n        const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n        const pSize = particle.size.value;\n        const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n        if (size !== undefined) {\n            particle.bubble.radius = size;\n        }\n    }\n    hoverBubbleOpacity(particle, ratio, divBubble) {\n        var _a, _b, _c;\n        const container = this.container, options = container.actualOptions, modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n        if (!modeOpacity) {\n            return;\n        }\n        const optOpacity = particle.options.opacity.value;\n        const pOpacity = (_c = (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1;\n        const opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n        if (opacity !== undefined) {\n            particle.bubble.opacity = opacity;\n        }\n    }\n    hoverBubbleColor(particle, ratio, divBubble) {\n        const options = this.container.actualOptions;\n        const bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n        if (!particle.bubble.finalColor) {\n            const modeColor = bubbleOptions.color;\n            if (!modeColor) {\n                return;\n            }\n            const bubbleColor = modeColor instanceof Array ? itemFromArray(modeColor) : modeColor;\n            particle.bubble.finalColor = colorToHsl(bubbleColor);\n        }\n        if (!particle.bubble.finalColor) {\n            return;\n        }\n        if (bubbleOptions.mix) {\n            particle.bubble.color = undefined;\n            const pColor = particle.getFillColor();\n            particle.bubble.color = pColor\n                ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio))\n                : particle.bubble.finalColor;\n        }\n        else {\n            particle.bubble.color = particle.bubble.finalColor;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}