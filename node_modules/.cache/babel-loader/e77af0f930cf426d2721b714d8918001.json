{"ast":null,"code":"import _asyncToGenerator from \"E:/Dev/Projects/In Progress/portfolio-backup/myportfolio/portfolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"E:/Dev/Projects/In Progress/portfolio-backup/myportfolio/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Dev/Projects/In Progress/portfolio-backup/myportfolio/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"E:\\\\Dev\\\\Projects\\\\In Progress\\\\portfolio-backup\\\\myportfolio\\\\portfolio\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nexport var FrameManager = /*#__PURE__*/function () {\n  function FrameManager(container) {\n    _classCallCheck(this, FrameManager);\n\n    this.container = container;\n  }\n\n  _createClass(FrameManager, [{\n    key: \"nextFrame\",\n    value: function () {\n      var _nextFrame = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(timestamp) {\n        var _a, container, deltaValue, delta;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                container = this.container;\n\n                if (!(container.lastFrameTime !== undefined && timestamp < container.lastFrameTime + 1000 / container.fpsLimit)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                container.draw(false);\n                return _context.abrupt(\"return\");\n\n              case 5:\n                (_a = container.lastFrameTime) !== null && _a !== void 0 ? _a : container.lastFrameTime = timestamp;\n                deltaValue = timestamp - container.lastFrameTime;\n                delta = {\n                  value: deltaValue,\n                  factor: 60 * deltaValue / 1000\n                };\n                container.lifeTime += delta.value;\n                container.lastFrameTime = timestamp;\n\n                if (!(deltaValue > 1000)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                container.draw(false);\n                return _context.abrupt(\"return\");\n\n              case 13:\n                _context.next = 15;\n                return container.particles.draw(delta);\n\n              case 15:\n                if (!(container.duration > 0 && container.lifeTime > container.duration)) {\n                  _context.next = 18;\n                  break;\n                }\n\n                container.destroy();\n                return _context.abrupt(\"return\");\n\n              case 18:\n                if (container.getAnimationStatus()) {\n                  container.draw(false);\n                }\n\n                _context.next = 24;\n                break;\n\n              case 21:\n                _context.prev = 21;\n                _context.t0 = _context[\"catch\"](0);\n                console.error(\"tsParticles error in animation loop\", _context.t0);\n\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 21]]);\n      }));\n\n      function nextFrame(_x) {\n        return _nextFrame.apply(this, arguments);\n      }\n\n      return nextFrame;\n    }()\n  }]);\n\n  return FrameManager;\n}();","map":{"version":3,"sources":["E:/Dev/Projects/In Progress/portfolio-backup/myportfolio/portfolio/node_modules/tsparticles/esm/Core/Utils/FrameManager.js"],"names":["FrameManager","container","timestamp","lastFrameTime","undefined","fpsLimit","draw","_a","deltaValue","delta","value","factor","lifeTime","particles","duration","destroy","getAnimationStatus","console","error"],"mappings":";;;;AAAA,WAAaA,YAAb;AACI,wBAAYC,SAAZ,EAAuB;AAAA;;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACH;;AAHL;AAAA;AAAA;AAAA,gFAII,iBAAgBC,SAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGcD,gBAAAA,SAHd,GAG0B,KAAKA,SAH/B;;AAAA,sBAIYA,SAAS,CAACE,aAAV,KAA4BC,SAA5B,IACAF,SAAS,GAAGD,SAAS,CAACE,aAAV,GAA0B,OAAOF,SAAS,CAACI,QALnE;AAAA;AAAA;AAAA;;AAMYJ,gBAAAA,SAAS,CAACK,IAAV,CAAe,KAAf;AANZ;;AAAA;AASQ,iBAACC,EAAE,GAAGN,SAAS,CAACE,aAAhB,MAAmC,IAAnC,IAA2CI,EAAE,KAAK,KAAK,CAAvD,GAA2DA,EAA3D,GAAiEN,SAAS,CAACE,aAAV,GAA0BD,SAA3F;AACMM,gBAAAA,UAVd,GAU2BN,SAAS,GAAGD,SAAS,CAACE,aAVjD;AAWcM,gBAAAA,KAXd,GAWsB;AACVC,kBAAAA,KAAK,EAAEF,UADG;AAEVG,kBAAAA,MAAM,EAAG,KAAKH,UAAN,GAAoB;AAFlB,iBAXtB;AAeQP,gBAAAA,SAAS,CAACW,QAAV,IAAsBH,KAAK,CAACC,KAA5B;AACAT,gBAAAA,SAAS,CAACE,aAAV,GAA0BD,SAA1B;;AAhBR,sBAiBYM,UAAU,GAAG,IAjBzB;AAAA;AAAA;AAAA;;AAkBYP,gBAAAA,SAAS,CAACK,IAAV,CAAe,KAAf;AAlBZ;;AAAA;AAAA;AAAA,uBAqBcL,SAAS,CAACY,SAAV,CAAoBP,IAApB,CAAyBG,KAAzB,CArBd;;AAAA;AAAA,sBAsBYR,SAAS,CAACa,QAAV,GAAqB,CAArB,IAA0Bb,SAAS,CAACW,QAAV,GAAqBX,SAAS,CAACa,QAtBrE;AAAA;AAAA;AAAA;;AAuBYb,gBAAAA,SAAS,CAACc,OAAV;AAvBZ;;AAAA;AA0BQ,oBAAId,SAAS,CAACe,kBAAV,EAAJ,EAAoC;AAChCf,kBAAAA,SAAS,CAACK,IAAV,CAAe,KAAf;AACH;;AA5BT;AAAA;;AAAA;AAAA;AAAA;AA+BQW,gBAAAA,OAAO,CAACC,KAAR,CAAc,qCAAd;;AA/BR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAJJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA","sourcesContent":["export class FrameManager {\n    constructor(container) {\n        this.container = container;\n    }\n    async nextFrame(timestamp) {\n        var _a;\n        try {\n            const container = this.container;\n            if (container.lastFrameTime !== undefined &&\n                timestamp < container.lastFrameTime + 1000 / container.fpsLimit) {\n                container.draw(false);\n                return;\n            }\n            (_a = container.lastFrameTime) !== null && _a !== void 0 ? _a : (container.lastFrameTime = timestamp);\n            const deltaValue = timestamp - container.lastFrameTime;\n            const delta = {\n                value: deltaValue,\n                factor: (60 * deltaValue) / 1000,\n            };\n            container.lifeTime += delta.value;\n            container.lastFrameTime = timestamp;\n            if (deltaValue > 1000) {\n                container.draw(false);\n                return;\n            }\n            await container.particles.draw(delta);\n            if (container.duration > 0 && container.lifeTime > container.duration) {\n                container.destroy();\n                return;\n            }\n            if (container.getAnimationStatus()) {\n                container.draw(false);\n            }\n        }\n        catch (e) {\n            console.error(\"tsParticles error in animation loop\", e);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}