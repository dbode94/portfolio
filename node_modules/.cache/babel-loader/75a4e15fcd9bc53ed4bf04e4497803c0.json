{"ast":null,"code":"import _asyncToGenerator from \"/home/dnis/Dev/portfolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/home/dnis/Dev/portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/home/dnis/Dev/portfolio/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/home/dnis/Dev/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/dnis/Dev/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/home/dnis/Dev/portfolio/node_modules/@babel/runtime/regenerator/index.js\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _Particles_engine;\n\nimport { InteractionManager, ParticlesMover, Point, QuadTree, Rectangle } from \"./Utils\";\nimport { getRangeMax, getRangeMin, getRangeValue, randomInRange, setRangeValue } from \"../Utils\";\nimport { Particle } from \"./Particle\";\nimport { ParticlesOptions } from \"../Options/Classes/Particles/ParticlesOptions\";\nexport var Particles = /*#__PURE__*/function () {\n  function Particles(engine, container) {\n    _classCallCheck(this, Particles);\n\n    this.container = container;\n\n    _Particles_engine.set(this, void 0);\n\n    __classPrivateFieldSet(this, _Particles_engine, engine, \"f\");\n\n    this.nextId = 0;\n    this.array = [];\n    this.zArray = [];\n    this.mover = new ParticlesMover(container);\n    this.limit = 0;\n    this.needsSort = false;\n    this.lastZIndex = 0;\n    this.freqs = {\n      links: new Map(),\n      triangles: new Map()\n    };\n    this.interactionManager = new InteractionManager(__classPrivateFieldGet(this, _Particles_engine, \"f\"), container);\n    var canvasSize = this.container.canvas.size;\n    this.linksColors = new Map();\n    this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    this.updaters = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getUpdaters(container, true);\n  }\n\n  _createClass(Particles, [{\n    key: \"count\",\n    get: function get() {\n      return this.array.length;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _a;\n\n      var container = this.container;\n      var options = container.actualOptions;\n      this.lastZIndex = 0;\n      this.needsSort = false;\n      this.freqs.links = new Map();\n      this.freqs.triangles = new Map();\n      var handled = false;\n      this.updaters = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getUpdaters(container, true);\n      this.interactionManager.init();\n\n      var _iterator = _createForOfIteratorHelper(container.plugins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              plugin = _step$value[1];\n\n          if (plugin.particlesInitialization !== undefined) {\n            handled = plugin.particlesInitialization();\n          }\n\n          if (handled) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.addManualParticles();\n\n      if (!handled) {\n        for (var group in options.particles.groups) {\n          var groupOptions = options.particles.groups[group];\n\n          for (var i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n            this.addParticle(undefined, groupOptions, group);\n          }\n        }\n\n        for (var _i = this.count; _i < options.particles.number.value; _i++) {\n          this.addParticle();\n        }\n      }\n\n      container.pathGenerator.init(container);\n    }\n  }, {\n    key: \"redraw\",\n    value: function () {\n      var _redraw = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.clear();\n                this.init();\n                _context.next = 4;\n                return this.draw({\n                  value: 0,\n                  factor: 0\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function redraw() {\n        return _redraw.apply(this, arguments);\n      }\n\n      return redraw;\n    }()\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(index) {\n      var quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var group = arguments.length > 2 ? arguments[2] : undefined;\n      var override = arguments.length > 3 ? arguments[3] : undefined;\n\n      if (!(index >= 0 && index <= this.count)) {\n        return;\n      }\n\n      var deleted = 0;\n\n      for (var i = index; deleted < quantity && i < this.count; i++) {\n        var particle = this.array[i];\n\n        if (!particle || particle.group !== group) {\n          continue;\n        }\n\n        particle.destroy(override);\n        this.array.splice(i--, 1);\n        var zIdx = this.zArray.indexOf(particle);\n        this.zArray.splice(zIdx, 1);\n        deleted++;\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(particle, group, override) {\n      this.removeAt(this.array.indexOf(particle), undefined, group, override);\n    }\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(delta) {\n        var container, particlesToDelete, _iterator2, _step2, _step2$value, plugin, _iterator3, _step3, _particle, resizeFactor, _iterator5, _step5, _step5$value, _plugin, _i2, _particlesToDelete, particle, _iterator4, _step4, _particle2, _iterator6, _step6, updater;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                container = this.container;\n                particlesToDelete = [];\n                container.pathGenerator.update();\n                _iterator2 = _createForOfIteratorHelper(container.plugins);\n\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    _step2$value = _slicedToArray(_step2.value, 2), plugin = _step2$value[1];\n\n                    if (plugin.update !== undefined) {\n                      plugin.update(delta);\n                    }\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n\n                _iterator3 = _createForOfIteratorHelper(this.array);\n                _context2.prev = 6;\n\n                _iterator3.s();\n\n              case 8:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context2.next = 38;\n                  break;\n                }\n\n                _particle = _step3.value;\n                resizeFactor = container.canvas.resizeFactor;\n\n                if (resizeFactor) {\n                  _particle.position.x *= resizeFactor.width;\n                  _particle.position.y *= resizeFactor.height;\n                }\n\n                _particle.bubble.inRange = false;\n                _iterator5 = _createForOfIteratorHelper(this.container.plugins);\n                _context2.prev = 14;\n\n                _iterator5.s();\n\n              case 16:\n                if ((_step5 = _iterator5.n()).done) {\n                  _context2.next = 23;\n                  break;\n                }\n\n                _step5$value = _slicedToArray(_step5.value, 2), _plugin = _step5$value[1];\n\n                if (!_particle.destroyed) {\n                  _context2.next = 20;\n                  break;\n                }\n\n                return _context2.abrupt(\"break\", 23);\n\n              case 20:\n                if (_plugin.particleUpdate) {\n                  _plugin.particleUpdate(_particle, delta);\n                }\n\n              case 21:\n                _context2.next = 16;\n                break;\n\n              case 23:\n                _context2.next = 28;\n                break;\n\n              case 25:\n                _context2.prev = 25;\n                _context2.t0 = _context2[\"catch\"](14);\n\n                _iterator5.e(_context2.t0);\n\n              case 28:\n                _context2.prev = 28;\n\n                _iterator5.f();\n\n                return _context2.finish(28);\n\n              case 31:\n                this.mover.move(_particle, delta);\n\n                if (!_particle.destroyed) {\n                  _context2.next = 35;\n                  break;\n                }\n\n                particlesToDelete.push(_particle);\n                return _context2.abrupt(\"continue\", 36);\n\n              case 35:\n                this.quadTree.insert(new Point(_particle.getPosition(), _particle));\n\n              case 36:\n                _context2.next = 8;\n                break;\n\n              case 38:\n                _context2.next = 43;\n                break;\n\n              case 40:\n                _context2.prev = 40;\n                _context2.t1 = _context2[\"catch\"](6);\n\n                _iterator3.e(_context2.t1);\n\n              case 43:\n                _context2.prev = 43;\n\n                _iterator3.f();\n\n                return _context2.finish(43);\n\n              case 46:\n                for (_i2 = 0, _particlesToDelete = particlesToDelete; _i2 < _particlesToDelete.length; _i2++) {\n                  particle = _particlesToDelete[_i2];\n                  this.remove(particle);\n                }\n\n                _context2.next = 49;\n                return this.interactionManager.externalInteract(delta);\n\n              case 49:\n                _iterator4 = _createForOfIteratorHelper(container.particles.array);\n                _context2.prev = 50;\n\n                _iterator4.s();\n\n              case 52:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context2.next = 61;\n                  break;\n                }\n\n                _particle2 = _step4.value;\n                _iterator6 = _createForOfIteratorHelper(this.updaters);\n\n                try {\n                  for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                    updater = _step6.value;\n                    updater.update(_particle2, delta);\n                  }\n                } catch (err) {\n                  _iterator6.e(err);\n                } finally {\n                  _iterator6.f();\n                }\n\n                if (!(!_particle2.destroyed && !_particle2.spawning)) {\n                  _context2.next = 59;\n                  break;\n                }\n\n                _context2.next = 59;\n                return this.interactionManager.particlesInteract(_particle2, delta);\n\n              case 59:\n                _context2.next = 52;\n                break;\n\n              case 61:\n                _context2.next = 66;\n                break;\n\n              case 63:\n                _context2.prev = 63;\n                _context2.t2 = _context2[\"catch\"](50);\n\n                _iterator4.e(_context2.t2);\n\n              case 66:\n                _context2.prev = 66;\n\n                _iterator4.f();\n\n                return _context2.finish(66);\n\n              case 69:\n                delete container.canvas.resizeFactor;\n\n              case 70:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[6, 40, 43, 46], [14, 25, 28, 31], [50, 63, 66, 69]]);\n      }));\n\n      function update(_x) {\n        return _update.apply(this, arguments);\n      }\n\n      return update;\n    }()\n  }, {\n    key: \"draw\",\n    value: function () {\n      var _draw = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(delta) {\n        var container, canvasSize, _iterator7, _step7, _step7$value, plugin, _iterator8, _step8, p;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                container = this.container;\n                container.canvas.clear();\n                canvasSize = this.container.canvas.size;\n                this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n                _context3.next = 6;\n                return this.update(delta);\n\n              case 6:\n                if (this.needsSort) {\n                  this.zArray.sort(function (a, b) {\n                    return b.position.z - a.position.z || a.id - b.id;\n                  });\n                  this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n                  this.needsSort = false;\n                }\n\n                _iterator7 = _createForOfIteratorHelper(container.plugins);\n\n                try {\n                  for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                    _step7$value = _slicedToArray(_step7.value, 2), plugin = _step7$value[1];\n                    container.canvas.drawPlugin(plugin, delta);\n                  }\n                } catch (err) {\n                  _iterator7.e(err);\n                } finally {\n                  _iterator7.f();\n                }\n\n                _iterator8 = _createForOfIteratorHelper(this.zArray);\n\n                try {\n                  for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                    p = _step8.value;\n                    p.draw(delta);\n                  }\n                } catch (err) {\n                  _iterator8.e(err);\n                } finally {\n                  _iterator8.f();\n                }\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function draw(_x2) {\n        return _draw.apply(this, arguments);\n      }\n\n      return draw;\n    }()\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.array = [];\n      this.zArray = [];\n    }\n  }, {\n    key: \"push\",\n    value: function push(nb, mouse, overrideOptions, group) {\n      this.pushing = true;\n\n      for (var i = 0; i < nb; i++) {\n        this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n      }\n\n      this.pushing = false;\n    }\n  }, {\n    key: \"addParticle\",\n    value: function addParticle(position, overrideOptions, group) {\n      var container = this.container,\n          options = container.actualOptions,\n          limit = options.particles.number.limit * container.density;\n\n      if (limit > 0) {\n        var countToRemove = this.count + 1 - limit;\n\n        if (countToRemove > 0) {\n          this.removeQuantity(countToRemove);\n        }\n      }\n\n      return this.pushParticle(position, overrideOptions, group);\n    }\n  }, {\n    key: \"addSplitParticle\",\n    value: function addSplitParticle(parent) {\n      var splitOptions = parent.options.destroy.split,\n          options = new ParticlesOptions();\n      options.load(parent.options);\n      var factor = getRangeValue(splitOptions.factor.value);\n      options.color.load({\n        value: {\n          hsl: parent.getFillColor()\n        }\n      });\n\n      if (typeof options.size.value === \"number\") {\n        options.size.value /= factor;\n      } else {\n        options.size.value.min /= factor;\n        options.size.value.max /= factor;\n      }\n\n      options.load(splitOptions.particles);\n      var offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0;\n      var position = {\n        x: parent.position.x + randomInRange(offset),\n        y: parent.position.y + randomInRange(offset)\n      };\n      return this.pushParticle(position, options, parent.group, function (particle) {\n        if (particle.size.value < 0.5) {\n          return false;\n        }\n\n        particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n        particle.splitCount = parent.splitCount + 1;\n        particle.unbreakable = true;\n        setTimeout(function () {\n          particle.unbreakable = false;\n        }, 500);\n        return true;\n      });\n    }\n  }, {\n    key: \"removeQuantity\",\n    value: function removeQuantity(quantity, group) {\n      this.removeAt(0, quantity, group);\n    }\n  }, {\n    key: \"getLinkFrequency\",\n    value: function getLinkFrequency(p1, p2) {\n      var range = setRangeValue(p1.id, p2.id),\n          key = \"\".concat(getRangeMin(range), \"_\").concat(getRangeMax(range));\n      var res = this.freqs.links.get(key);\n\n      if (res === undefined) {\n        res = Math.random();\n        this.freqs.links.set(key, res);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"getTriangleFrequency\",\n    value: function getTriangleFrequency(p1, p2, p3) {\n      var _ref = [p1.id, p2.id, p3.id],\n          id1 = _ref[0],\n          id2 = _ref[1],\n          id3 = _ref[2];\n\n      if (id1 > id2) {\n        var _ref2 = [id1, id2];\n        id2 = _ref2[0];\n        id1 = _ref2[1];\n      }\n\n      if (id2 > id3) {\n        var _ref3 = [id2, id3];\n        id3 = _ref3[0];\n        id2 = _ref3[1];\n      }\n\n      if (id1 > id3) {\n        var _ref4 = [id1, id3];\n        id3 = _ref4[0];\n        id1 = _ref4[1];\n      }\n\n      var key = \"\".concat(id1, \"_\").concat(id2, \"_\").concat(id3);\n      var res = this.freqs.triangles.get(key);\n\n      if (res === undefined) {\n        res = Math.random();\n        this.freqs.triangles.set(key, res);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"addManualParticles\",\n    value: function addManualParticles() {\n      var container = this.container,\n          options = container.actualOptions;\n\n      var _iterator9 = _createForOfIteratorHelper(options.manualParticles),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var particle = _step9.value;\n          var pos = particle.position ? {\n            x: particle.position.x * container.canvas.size.width / 100,\n            y: particle.position.y * container.canvas.size.height / 100\n          } : undefined;\n          this.addParticle(pos, particle.options);\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n    }\n  }, {\n    key: \"setDensity\",\n    value: function setDensity() {\n      var options = this.container.actualOptions;\n\n      for (var group in options.particles.groups) {\n        this.applyDensity(options.particles.groups[group], 0, group);\n      }\n\n      this.applyDensity(options.particles, options.manualParticles.length);\n    }\n  }, {\n    key: \"applyDensity\",\n    value: function applyDensity(options, manualCount, group) {\n      var _a;\n\n      if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n        return;\n      }\n\n      var numberOptions = options.number;\n      var densityFactor = this.initDensityFactor(numberOptions.density);\n      var optParticlesNumber = numberOptions.value;\n      var optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n      var particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount;\n      var particlesCount = Math.min(this.count, this.array.filter(function (t) {\n        return t.group === group;\n      }).length);\n      this.limit = numberOptions.limit * densityFactor;\n\n      if (particlesCount < particlesNumber) {\n        this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n      } else if (particlesCount > particlesNumber) {\n        this.removeQuantity(particlesCount - particlesNumber, group);\n      }\n    }\n  }, {\n    key: \"initDensityFactor\",\n    value: function initDensityFactor(densityOptions) {\n      var container = this.container;\n\n      if (!container.canvas.element || !densityOptions.enable) {\n        return 1;\n      }\n\n      var canvas = container.canvas.element,\n          pxRatio = container.retina.pixelRatio;\n      return canvas.width * canvas.height / (densityOptions.factor * Math.pow(pxRatio, 2) * densityOptions.area);\n    }\n  }, {\n    key: \"pushParticle\",\n    value: function pushParticle(position, overrideOptions, group, initializer) {\n      try {\n        var particle = new Particle(__classPrivateFieldGet(this, _Particles_engine, \"f\"), this.nextId, this.container, position, overrideOptions, group);\n        var canAdd = true;\n\n        if (initializer) {\n          canAdd = initializer(particle);\n        }\n\n        if (!canAdd) {\n          return;\n        }\n\n        this.array.push(particle);\n        this.zArray.push(particle);\n        this.nextId++;\n        return particle;\n      } catch (e) {\n        console.warn(\"error adding particle: \".concat(e));\n        return;\n      }\n    }\n  }]);\n\n  return Particles;\n}();\n_Particles_engine = new WeakMap();","map":{"version":3,"sources":["/home/dnis/Dev/portfolio/node_modules/tsparticles/esm/Core/Particles.js"],"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_Particles_engine","InteractionManager","ParticlesMover","Point","QuadTree","Rectangle","getRangeMax","getRangeMin","getRangeValue","randomInRange","setRangeValue","Particle","ParticlesOptions","Particles","engine","container","nextId","array","zArray","mover","limit","needsSort","lastZIndex","freqs","links","Map","triangles","interactionManager","canvasSize","canvas","size","linksColors","quadTree","width","height","updaters","plugins","getUpdaters","length","_a","options","actualOptions","handled","init","plugin","particlesInitialization","undefined","addManualParticles","group","particles","groups","groupOptions","i","count","j","number","addParticle","pathGenerator","clear","draw","factor","index","quantity","override","deleted","particle","destroy","splice","zIdx","indexOf","removeAt","delta","particlesToDelete","update","resizeFactor","position","x","y","bubble","inRange","destroyed","particleUpdate","move","push","insert","getPosition","remove","externalInteract","updater","spawning","particlesInteract","sort","a","b","z","id","drawPlugin","p","nb","mouse","overrideOptions","pushing","density","countToRemove","removeQuantity","pushParticle","parent","splitOptions","split","load","color","hsl","getFillColor","min","max","offset","sizeOffset","velocity","splitCount","unbreakable","setTimeout","p1","p2","range","key","res","Math","random","p3","id1","id2","id3","manualParticles","pos","applyDensity","manualCount","enable","numberOptions","densityFactor","initDensityFactor","optParticlesNumber","optParticlesLimit","particlesNumber","particlesCount","filter","t","abs","densityOptions","element","pxRatio","retina","pixelRatio","area","initializer","canAdd","e","console","warn","WeakMap"],"mappings":"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","sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Particles_engine;\nimport { InteractionManager, ParticlesMover, Point, QuadTree, Rectangle } from \"./Utils\";\nimport { getRangeMax, getRangeMin, getRangeValue, randomInRange, setRangeValue } from \"../Utils\";\nimport { Particle } from \"./Particle\";\nimport { ParticlesOptions } from \"../Options/Classes/Particles/ParticlesOptions\";\nexport class Particles {\n    constructor(engine, container) {\n        this.container = container;\n        _Particles_engine.set(this, void 0);\n        __classPrivateFieldSet(this, _Particles_engine, engine, \"f\");\n        this.nextId = 0;\n        this.array = [];\n        this.zArray = [];\n        this.mover = new ParticlesMover(container);\n        this.limit = 0;\n        this.needsSort = false;\n        this.lastZIndex = 0;\n        this.freqs = {\n            links: new Map(),\n            triangles: new Map(),\n        };\n        this.interactionManager = new InteractionManager(__classPrivateFieldGet(this, _Particles_engine, \"f\"), container);\n        const canvasSize = this.container.canvas.size;\n        this.linksColors = new Map();\n        this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        this.updaters = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getUpdaters(container, true);\n    }\n    get count() {\n        return this.array.length;\n    }\n    init() {\n        var _a;\n        const container = this.container;\n        const options = container.actualOptions;\n        this.lastZIndex = 0;\n        this.needsSort = false;\n        this.freqs.links = new Map();\n        this.freqs.triangles = new Map();\n        let handled = false;\n        this.updaters = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getUpdaters(container, true);\n        this.interactionManager.init();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        this.addManualParticles();\n        if (!handled) {\n            for (const group in options.particles.groups) {\n                const groupOptions = options.particles.groups[group];\n                for (let i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n                    this.addParticle(undefined, groupOptions, group);\n                }\n            }\n            for (let i = this.count; i < options.particles.number.value; i++) {\n                this.addParticle();\n            }\n        }\n        container.pathGenerator.init(container);\n    }\n    async redraw() {\n        this.clear();\n        this.init();\n        await this.draw({ value: 0, factor: 0 });\n    }\n    removeAt(index, quantity = 1, group, override) {\n        if (!(index >= 0 && index <= this.count)) {\n            return;\n        }\n        let deleted = 0;\n        for (let i = index; deleted < quantity && i < this.count; i++) {\n            const particle = this.array[i];\n            if (!particle || particle.group !== group) {\n                continue;\n            }\n            particle.destroy(override);\n            this.array.splice(i--, 1);\n            const zIdx = this.zArray.indexOf(particle);\n            this.zArray.splice(zIdx, 1);\n            deleted++;\n        }\n    }\n    remove(particle, group, override) {\n        this.removeAt(this.array.indexOf(particle), undefined, group, override);\n    }\n    async update(delta) {\n        const container = this.container;\n        const particlesToDelete = [];\n        container.pathGenerator.update();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.update !== undefined) {\n                plugin.update(delta);\n            }\n        }\n        for (const particle of this.array) {\n            const resizeFactor = container.canvas.resizeFactor;\n            if (resizeFactor) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n            }\n            particle.bubble.inRange = false;\n            for (const [, plugin] of this.container.plugins) {\n                if (particle.destroyed) {\n                    break;\n                }\n                if (plugin.particleUpdate) {\n                    plugin.particleUpdate(particle, delta);\n                }\n            }\n            this.mover.move(particle, delta);\n            if (particle.destroyed) {\n                particlesToDelete.push(particle);\n                continue;\n            }\n            this.quadTree.insert(new Point(particle.getPosition(), particle));\n        }\n        for (const particle of particlesToDelete) {\n            this.remove(particle);\n        }\n        await this.interactionManager.externalInteract(delta);\n        for (const particle of container.particles.array) {\n            for (const updater of this.updaters) {\n                updater.update(particle, delta);\n            }\n            if (!particle.destroyed && !particle.spawning) {\n                await this.interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete container.canvas.resizeFactor;\n    }\n    async draw(delta) {\n        const container = this.container;\n        container.canvas.clear();\n        const canvasSize = this.container.canvas.size;\n        this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        await this.update(delta);\n        if (this.needsSort) {\n            this.zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n            this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n            this.needsSort = false;\n        }\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this.zArray) {\n            p.draw(delta);\n        }\n    }\n    clear() {\n        this.array = [];\n        this.zArray = [];\n    }\n    push(nb, mouse, overrideOptions, group) {\n        this.pushing = true;\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n        }\n        this.pushing = false;\n    }\n    addParticle(position, overrideOptions, group) {\n        const container = this.container, options = container.actualOptions, limit = options.particles.number.limit * container.density;\n        if (limit > 0) {\n            const countToRemove = this.count + 1 - limit;\n            if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n            }\n        }\n        return this.pushParticle(position, overrideOptions, group);\n    }\n    addSplitParticle(parent) {\n        const splitOptions = parent.options.destroy.split, options = new ParticlesOptions();\n        options.load(parent.options);\n        const factor = getRangeValue(splitOptions.factor.value);\n        options.color.load({\n            value: {\n                hsl: parent.getFillColor(),\n            },\n        });\n        if (typeof options.size.value === \"number\") {\n            options.size.value /= factor;\n        }\n        else {\n            options.size.value.min /= factor;\n            options.size.value.max /= factor;\n        }\n        options.load(splitOptions.particles);\n        const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0;\n        const position = {\n            x: parent.position.x + randomInRange(offset),\n            y: parent.position.y + randomInRange(offset),\n        };\n        return this.pushParticle(position, options, parent.group, (particle) => {\n            if (particle.size.value < 0.5) {\n                return false;\n            }\n            particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n            particle.splitCount = parent.splitCount + 1;\n            particle.unbreakable = true;\n            setTimeout(() => {\n                particle.unbreakable = false;\n            }, 500);\n            return true;\n        });\n    }\n    removeQuantity(quantity, group) {\n        this.removeAt(0, quantity, group);\n    }\n    getLinkFrequency(p1, p2) {\n        const range = setRangeValue(p1.id, p2.id), key = `${getRangeMin(range)}_${getRangeMax(range)}`;\n        let res = this.freqs.links.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.freqs.links.set(key, res);\n        }\n        return res;\n    }\n    getTriangleFrequency(p1, p2, p3) {\n        let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n        if (id1 > id2) {\n            [id2, id1] = [id1, id2];\n        }\n        if (id2 > id3) {\n            [id3, id2] = [id2, id3];\n        }\n        if (id1 > id3) {\n            [id3, id1] = [id1, id3];\n        }\n        const key = `${id1}_${id2}_${id3}`;\n        let res = this.freqs.triangles.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.freqs.triangles.set(key, res);\n        }\n        return res;\n    }\n    addManualParticles() {\n        const container = this.container, options = container.actualOptions;\n        for (const particle of options.manualParticles) {\n            const pos = particle.position\n                ? {\n                    x: (particle.position.x * container.canvas.size.width) / 100,\n                    y: (particle.position.y * container.canvas.size.height) / 100,\n                }\n                : undefined;\n            this.addParticle(pos, particle.options);\n        }\n    }\n    setDensity() {\n        const options = this.container.actualOptions;\n        for (const group in options.particles.groups) {\n            this.applyDensity(options.particles.groups[group], 0, group);\n        }\n        this.applyDensity(options.particles, options.manualParticles.length);\n    }\n    applyDensity(options, manualCount, group) {\n        var _a;\n        if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n            return;\n        }\n        const numberOptions = options.number;\n        const densityFactor = this.initDensityFactor(numberOptions.density);\n        const optParticlesNumber = numberOptions.value;\n        const optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n        const particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount;\n        const particlesCount = Math.min(this.count, this.array.filter((t) => t.group === group).length);\n        this.limit = numberOptions.limit * densityFactor;\n        if (particlesCount < particlesNumber) {\n            this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n        }\n        else if (particlesCount > particlesNumber) {\n            this.removeQuantity(particlesCount - particlesNumber, group);\n        }\n    }\n    initDensityFactor(densityOptions) {\n        const container = this.container;\n        if (!container.canvas.element || !densityOptions.enable) {\n            return 1;\n        }\n        const canvas = container.canvas.element, pxRatio = container.retina.pixelRatio;\n        return (canvas.width * canvas.height) / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n    }\n    pushParticle(position, overrideOptions, group, initializer) {\n        try {\n            const particle = new Particle(__classPrivateFieldGet(this, _Particles_engine, \"f\"), this.nextId, this.container, position, overrideOptions, group);\n            let canAdd = true;\n            if (initializer) {\n                canAdd = initializer(particle);\n            }\n            if (!canAdd) {\n                return;\n            }\n            this.array.push(particle);\n            this.zArray.push(particle);\n            this.nextId++;\n            return particle;\n        }\n        catch (e) {\n            console.warn(`error adding particle: ${e}`);\n            return;\n        }\n    }\n}\n_Particles_engine = new WeakMap();\n"]},"metadata":{},"sourceType":"module"}