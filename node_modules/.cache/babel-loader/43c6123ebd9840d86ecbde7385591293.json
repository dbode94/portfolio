{"ast":null,"code":"import _classCallCheck from \"/home/dnis/Dev/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/dnis/Dev/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { colorToRgb, getDistance, getDistances, getRangeValue, getStyleFromRgb, isPointInside } from \"../../Utils\";\nimport { Absorber } from \"./Options/Classes/Absorber\";\nimport { Vector } from \"../../Core\";\nexport var AbsorberInstance = /*#__PURE__*/function () {\n  function AbsorberInstance(absorbers, container, options, position) {\n    _classCallCheck(this, AbsorberInstance);\n\n    var _a, _b, _c;\n\n    this.absorbers = absorbers;\n    this.container = container;\n    this.initialPosition = position ? Vector.create(position.x, position.y) : undefined;\n\n    if (options instanceof Absorber) {\n      this.options = options;\n    } else {\n      this.options = new Absorber();\n      this.options.load(options);\n    }\n\n    this.dragging = false;\n    this.name = this.options.name;\n    this.opacity = this.options.opacity;\n    this.size = getRangeValue(this.options.size.value) * container.retina.pixelRatio;\n    this.mass = this.size * this.options.size.density * container.retina.reduceFactor;\n    var limit = this.options.size.limit;\n    this.limit = {\n      radius: limit.radius * container.retina.pixelRatio * container.retina.reduceFactor,\n      mass: limit.mass\n    };\n    this.color = (_a = colorToRgb(this.options.color)) !== null && _a !== void 0 ? _a : {\n      b: 0,\n      g: 0,\n      r: 0\n    };\n    this.position = (_c = (_b = this.initialPosition) === null || _b === void 0 ? void 0 : _b.copy()) !== null && _c !== void 0 ? _c : this.calcPosition();\n  }\n\n  _createClass(AbsorberInstance, [{\n    key: \"attract\",\n    value: function attract(particle) {\n      var container = this.container;\n      var options = this.options;\n\n      if (options.draggable) {\n        var mouse = container.interactivity.mouse;\n\n        if (mouse.clicking && mouse.downPosition) {\n          var mouseDist = getDistance(this.position, mouse.downPosition);\n\n          if (mouseDist <= this.size) {\n            this.dragging = true;\n          }\n        } else {\n          this.dragging = false;\n        }\n\n        if (this.dragging && mouse.position) {\n          this.position.x = mouse.position.x;\n          this.position.y = mouse.position.y;\n        }\n      }\n\n      var pos = particle.getPosition();\n\n      var _getDistances = getDistances(this.position, pos),\n          dx = _getDistances.dx,\n          dy = _getDistances.dy,\n          distance = _getDistances.distance;\n\n      var v = Vector.create(dx, dy);\n      v.length = this.mass / Math.pow(distance, 2) * container.retina.reduceFactor;\n\n      if (distance < this.size + particle.getRadius()) {\n        var sizeFactor = particle.getRadius() * 0.033 * container.retina.pixelRatio;\n\n        if (this.size > particle.getRadius() && distance < this.size - particle.getRadius() || particle.absorberOrbit !== undefined && particle.absorberOrbit.length < 0) {\n          if (options.destroy) {\n            particle.destroy();\n          } else {\n            particle.needsNewPosition = true;\n            this.updateParticlePosition(particle, v);\n          }\n        } else {\n          if (options.destroy) {\n            particle.size.value -= sizeFactor;\n          }\n\n          this.updateParticlePosition(particle, v);\n        }\n\n        if (this.limit.radius <= 0 || this.size < this.limit.radius) {\n          this.size += sizeFactor;\n        }\n\n        if (this.limit.mass <= 0 || this.mass < this.limit.mass) {\n          this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n        }\n      } else {\n        this.updateParticlePosition(particle, v);\n      }\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var initialPosition = this.initialPosition;\n      this.position = initialPosition && isPointInside(initialPosition, this.container.canvas.size) ? initialPosition : this.calcPosition();\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(context) {\n      context.translate(this.position.x, this.position.y);\n      context.beginPath();\n      context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n      context.closePath();\n      context.fillStyle = getStyleFromRgb(this.color, this.opacity);\n      context.fill();\n    }\n  }, {\n    key: \"calcPosition\",\n    value: function calcPosition() {\n      var _a, _b;\n\n      var container = this.container;\n      var percentPosition = this.options.position;\n      return Vector.create(((_a = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.x) !== null && _a !== void 0 ? _a : Math.random() * 100) / 100 * container.canvas.size.width, ((_b = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.y) !== null && _b !== void 0 ? _b : Math.random() * 100) / 100 * container.canvas.size.height);\n    }\n  }, {\n    key: \"updateParticlePosition\",\n    value: function updateParticlePosition(particle, v) {\n      var _a;\n\n      if (particle.destroyed) {\n        return;\n      }\n\n      var container = this.container;\n      var canvasSize = container.canvas.size;\n\n      if (particle.needsNewPosition) {\n        particle.position.x = Math.floor(Math.random() * canvasSize.width);\n        particle.position.y = Math.floor(Math.random() * canvasSize.height);\n        particle.velocity.setTo(particle.initialVelocity);\n        particle.absorberOrbit = undefined;\n        particle.needsNewPosition = false;\n      }\n\n      if (this.options.orbits) {\n        if (particle.absorberOrbit === undefined) {\n          particle.absorberOrbit = Vector.create(0, 0);\n          particle.absorberOrbit.length = getDistance(particle.getPosition(), this.position);\n          particle.absorberOrbit.angle = Math.random() * Math.PI * 2;\n        }\n\n        if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n          var minSize = Math.min(canvasSize.width, canvasSize.height);\n          particle.absorberOrbit.length = minSize * (1 + (Math.random() * 0.2 - 0.1));\n        }\n\n        if (particle.absorberOrbitDirection === undefined) {\n          particle.absorberOrbitDirection = particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\";\n        }\n\n        var orbitRadius = particle.absorberOrbit.length;\n        var orbitAngle = particle.absorberOrbit.angle;\n        var orbitDirection = particle.absorberOrbitDirection;\n        particle.velocity.x = 0;\n        particle.velocity.y = 0;\n        var updateFunc = {\n          x: orbitDirection === \"clockwise\" ? Math.cos : Math.sin,\n          y: orbitDirection === \"clockwise\" ? Math.sin : Math.cos\n        };\n        particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n        particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n        particle.absorberOrbit.length -= v.length;\n        particle.absorberOrbit.angle += ((_a = particle.retina.moveSpeed) !== null && _a !== void 0 ? _a : 0) * container.retina.pixelRatio / 100 * container.retina.reduceFactor;\n      } else {\n        var addV = Vector.origin;\n        addV.length = v.length;\n        addV.angle = v.angle;\n        particle.velocity.addTo(addV);\n      }\n    }\n  }]);\n\n  return AbsorberInstance;\n}();","map":{"version":3,"sources":["/home/dnis/Dev/portfolio/node_modules/tsparticles/esm/Plugins/Absorbers/AbsorberInstance.js"],"names":["colorToRgb","getDistance","getDistances","getRangeValue","getStyleFromRgb","isPointInside","Absorber","Vector","AbsorberInstance","absorbers","container","options","position","_a","_b","_c","initialPosition","create","x","y","undefined","load","dragging","name","opacity","size","value","retina","pixelRatio","mass","density","reduceFactor","limit","radius","color","b","g","r","copy","calcPosition","particle","draggable","mouse","interactivity","clicking","downPosition","mouseDist","pos","getPosition","dx","dy","distance","v","length","Math","pow","getRadius","sizeFactor","absorberOrbit","destroy","needsNewPosition","updateParticlePosition","canvas","context","translate","beginPath","arc","PI","closePath","fillStyle","fill","percentPosition","random","width","height","destroyed","canvasSize","floor","velocity","setTo","initialVelocity","orbits","angle","minSize","min","absorberOrbitDirection","orbitRadius","orbitAngle","orbitDirection","updateFunc","cos","sin","moveSpeed","addV","origin","addTo"],"mappings":"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","sourcesContent":["import { colorToRgb, getDistance, getDistances, getRangeValue, getStyleFromRgb, isPointInside } from \"../../Utils\";\nimport { Absorber } from \"./Options/Classes/Absorber\";\nimport { Vector } from \"../../Core\";\nexport class AbsorberInstance {\n    constructor(absorbers, container, options, position) {\n        var _a, _b, _c;\n        this.absorbers = absorbers;\n        this.container = container;\n        this.initialPosition = position ? Vector.create(position.x, position.y) : undefined;\n        if (options instanceof Absorber) {\n            this.options = options;\n        }\n        else {\n            this.options = new Absorber();\n            this.options.load(options);\n        }\n        this.dragging = false;\n        this.name = this.options.name;\n        this.opacity = this.options.opacity;\n        this.size = getRangeValue(this.options.size.value) * container.retina.pixelRatio;\n        this.mass = this.size * this.options.size.density * container.retina.reduceFactor;\n        const limit = this.options.size.limit;\n        this.limit = {\n            radius: limit.radius * container.retina.pixelRatio * container.retina.reduceFactor,\n            mass: limit.mass,\n        };\n        this.color = (_a = colorToRgb(this.options.color)) !== null && _a !== void 0 ? _a : {\n            b: 0,\n            g: 0,\n            r: 0,\n        };\n        this.position = (_c = (_b = this.initialPosition) === null || _b === void 0 ? void 0 : _b.copy()) !== null && _c !== void 0 ? _c : this.calcPosition();\n    }\n    attract(particle) {\n        const container = this.container;\n        const options = this.options;\n        if (options.draggable) {\n            const mouse = container.interactivity.mouse;\n            if (mouse.clicking && mouse.downPosition) {\n                const mouseDist = getDistance(this.position, mouse.downPosition);\n                if (mouseDist <= this.size) {\n                    this.dragging = true;\n                }\n            }\n            else {\n                this.dragging = false;\n            }\n            if (this.dragging && mouse.position) {\n                this.position.x = mouse.position.x;\n                this.position.y = mouse.position.y;\n            }\n        }\n        const pos = particle.getPosition();\n        const { dx, dy, distance } = getDistances(this.position, pos);\n        const v = Vector.create(dx, dy);\n        v.length = (this.mass / Math.pow(distance, 2)) * container.retina.reduceFactor;\n        if (distance < this.size + particle.getRadius()) {\n            const sizeFactor = particle.getRadius() * 0.033 * container.retina.pixelRatio;\n            if ((this.size > particle.getRadius() && distance < this.size - particle.getRadius()) ||\n                (particle.absorberOrbit !== undefined && particle.absorberOrbit.length < 0)) {\n                if (options.destroy) {\n                    particle.destroy();\n                }\n                else {\n                    particle.needsNewPosition = true;\n                    this.updateParticlePosition(particle, v);\n                }\n            }\n            else {\n                if (options.destroy) {\n                    particle.size.value -= sizeFactor;\n                }\n                this.updateParticlePosition(particle, v);\n            }\n            if (this.limit.radius <= 0 || this.size < this.limit.radius) {\n                this.size += sizeFactor;\n            }\n            if (this.limit.mass <= 0 || this.mass < this.limit.mass) {\n                this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n            }\n        }\n        else {\n            this.updateParticlePosition(particle, v);\n        }\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size)\n                ? initialPosition\n                : this.calcPosition();\n    }\n    draw(context) {\n        context.translate(this.position.x, this.position.y);\n        context.beginPath();\n        context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n        context.closePath();\n        context.fillStyle = getStyleFromRgb(this.color, this.opacity);\n        context.fill();\n    }\n    calcPosition() {\n        var _a, _b;\n        const container = this.container;\n        const percentPosition = this.options.position;\n        return Vector.create((((_a = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.x) !== null && _a !== void 0 ? _a : Math.random() * 100) / 100) * container.canvas.size.width, (((_b = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.y) !== null && _b !== void 0 ? _b : Math.random() * 100) / 100) * container.canvas.size.height);\n    }\n    updateParticlePosition(particle, v) {\n        var _a;\n        if (particle.destroyed) {\n            return;\n        }\n        const container = this.container;\n        const canvasSize = container.canvas.size;\n        if (particle.needsNewPosition) {\n            particle.position.x = Math.floor(Math.random() * canvasSize.width);\n            particle.position.y = Math.floor(Math.random() * canvasSize.height);\n            particle.velocity.setTo(particle.initialVelocity);\n            particle.absorberOrbit = undefined;\n            particle.needsNewPosition = false;\n        }\n        if (this.options.orbits) {\n            if (particle.absorberOrbit === undefined) {\n                particle.absorberOrbit = Vector.create(0, 0);\n                particle.absorberOrbit.length = getDistance(particle.getPosition(), this.position);\n                particle.absorberOrbit.angle = Math.random() * Math.PI * 2;\n            }\n            if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n                const minSize = Math.min(canvasSize.width, canvasSize.height);\n                particle.absorberOrbit.length = minSize * (1 + (Math.random() * 0.2 - 0.1));\n            }\n            if (particle.absorberOrbitDirection === undefined) {\n                particle.absorberOrbitDirection =\n                    particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\";\n            }\n            const orbitRadius = particle.absorberOrbit.length;\n            const orbitAngle = particle.absorberOrbit.angle;\n            const orbitDirection = particle.absorberOrbitDirection;\n            particle.velocity.x = 0;\n            particle.velocity.y = 0;\n            const updateFunc = {\n                x: orbitDirection === \"clockwise\" ? Math.cos : Math.sin,\n                y: orbitDirection === \"clockwise\" ? Math.sin : Math.cos,\n            };\n            particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n            particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n            particle.absorberOrbit.length -= v.length;\n            particle.absorberOrbit.angle +=\n                ((((_a = particle.retina.moveSpeed) !== null && _a !== void 0 ? _a : 0) * container.retina.pixelRatio) / 100) *\n                    container.retina.reduceFactor;\n        }\n        else {\n            const addV = Vector.origin;\n            addV.length = v.length;\n            addV.angle = v.angle;\n            particle.velocity.addTo(addV);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}